var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Intrudex.html","title":"What is Intrudex?","text":"<p>Intrudex is a comprehensive, lightweight intrusion detection and prevention system (IDPS) specifically designed for Windows environments. Leveraging the power of Sigma rules\u2014a community-driven standard for describing log events\u2014Intrudex continuously monitors Windows Event Logs to identify suspicious activity, potential threats, and indicators of compromise.</p>"},{"location":"Intrudex.html#key-features","title":"Key Features","text":"<ul> <li>Real-Time Threat Detection: Monitors Windows Event Logs and applies Sigma rules to detect suspicious activity as it happens.</li> <li>Modular Architecture: Flexible design suitable for both individuals and organizations, allowing easy customization and extension.</li> <li>Web Dashboard: Centralized monitoring and management via a user-friendly Flask-based dashboard.</li> <li>Self-Healing Mechanisms: Ensures persistent protection, even against attempts to disable or tamper with the system.</li> </ul>"},{"location":"Intrudex.html#how-it-works","title":"How It Works","text":"<ol> <li>Log Collection: Continuously gathers Windows Event Logs from the endpoint.</li> <li>Sigma Rule Application: Transforms raw log data into meaningful alerts using community-driven Sigma rules.</li> <li>Threat Analysis: Evaluates alerts to determine the severity and nature of detected threats.</li> <li>Centralized Monitoring: Presents all alerts and findings in a web dashboard for easy review and management.</li> </ol>"},{"location":"Intrudex.html#project-background","title":"Project Background","text":"<p>Intrudex was originally developed as a Final Year Project for the BS Digital Forensics and Cybersecurity program. The goal: bridge the gap between advanced threat detection techniques and practical, effective defense for Windows endpoints.</p>"},{"location":"Intrudex.html#why-choose-intrudex","title":"Why Choose Intrudex?","text":"<ul> <li>Lightweight: Minimal resource usage, ideal for endpoints.</li> <li>Community-Driven: Utilizes Sigma rules, benefiting from ongoing contributions and updates.</li> <li>Practical Defense: Focuses on actionable alerts to keep systems secure.</li> <li>Easy to Use: Simple setup and intuitive dashboard for monitoring and management.</li> </ul>"},{"location":"Intrudex.html#get-involved","title":"Get Involved","text":"<p>Intrudex is open for contributions and feedback. If you are interested in cybersecurity, log analysis, or endpoint protection, consider joining the project or sharing your ideas.</p> <ul> <li>GitHub Repository</li> <li>Contact Author</li> <li>Author's Website</li> </ul>"},{"location":"about.html","title":"About Intrudex","text":"<p>Intrudex is a comprehensive, open-source security monitoring and threat detection platform designed to provide enterprise-grade security intelligence for organizations of all sizes. Built with modern technologies and designed for scalability, Intrudex delivers real-time threat detection, log analysis, and security monitoring capabilities.</p>"},{"location":"about.html#mission-statement","title":"Mission Statement","text":"<p>Our mission is to democratize enterprise-grade security monitoring by providing an open-source platform that delivers professional-level threat detection capabilities without the complexity and cost barriers typically associated with commercial solutions.</p>"},{"location":"about.html#what-is-intrudex","title":"What is Intrudex?","text":"<p>Intrudex is a distributed security monitoring system that combines:</p> <ul> <li>Real-time Log Collection: Advanced log aggregation from multiple sources</li> <li>Threat Detection Engine: Sigma-based rules processing and behavioral analysis</li> <li>Security Analytics: Comprehensive analysis and correlation of security events</li> <li>Scalable Architecture: Designed to grow with your organization's needs</li> <li>Enterprise Integration: Seamless integration with existing security infrastructure</li> </ul> <pre><code>graph TB\n        subgraph \"Intrudex Platform Architecture\"\n                A[Log Sources]\n                B[Intrudex Clients]\n                C[Central Server]\n                D[Detection Engine]\n                E[Analytics Dashboard]\n                F[Alert Management]\n        end\n\n        A --&gt; B\n        B --&gt; C\n        C --&gt; D\n        D --&gt; E\n        D --&gt; F\n\n        style A fill:#3498db\n        style C fill:#e74c3c\n        style D fill:#27ae60\n        style E fill:#9b59b6\n        style F fill:#f39c12</code></pre>"},{"location":"about.html#platform-architecture","title":"Platform Architecture","text":""},{"location":"about.html#client-server-model","title":"Client-Server Model","text":"<p>Intrudex operates on a distributed client-server architecture:</p> <p>Intrudex Clients: - Lightweight agents deployed on monitored systems - Real-time log collection and preprocessing - Local threat detection capabilities - Secure communication with central server</p> <p>Intrudex Server: - Central management and coordination - Advanced analytics and correlation engine - Web-based dashboard and management interface - API endpoints for integrations</p>"},{"location":"about.html#technology-stack","title":"Technology Stack","text":""},{"location":"about.html#backend-technologies","title":"Backend Technologies","text":"<ul> <li>Language: <code>Python 3.10+</code></li> <li>Framework: <code>Flask</code></li> <li>Database: <code>PostgreSQL</code>, <code>SQLite</code></li> </ul>"},{"location":"about.html#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li>Framework:  <code>Flask</code> / <code>Jinja Templates</code> / <code>MKDocs</code></li> <li>Styling: <code>Tailwind CSS</code> / <code>CSS</code></li> <li>Visualization: <code>Clipboard.js</code> / <code>Chart.js</code> / <code>CodeMirror</code> / <code>Mermaid</code></li> <li>Real-time Updates: HTMX / Alpine.js </li> <li>Miscellaneous: <code>Prism</code> / <code>Font Awsome</code> / <code>jsDelivery</code> / <code>Google Fonts API</code> / <code>UnPkg</code></li> </ul>"},{"location":"about.html#client-technologies","title":"Client Technologies","text":"<ul> <li>Language: <code>C++</code></li> <li>Platform Support: <code>Windows</code></li> <li>Service Integration: <code>Windows Services</code></li> <li>Configuration: <code>JSON</code> and <code>XML</code> based configuration</li> </ul>"},{"location":"about.html#licensing--legal","title":"Licensing &amp; Legal","text":""},{"location":"about.html#open-source-license","title":"Open Source License","text":"<p>Intrudex is released under the MIT License, ensuring:</p> <ul> <li>Freedom to Use: Commercial and non-commercial use</li> <li>Freedom to Modify: Adapt to your specific needs</li> <li>Freedom to Distribute: Share with your organization</li> <li>No Warranty: Use at your own risk with community support</li> </ul>"},{"location":"about.html#trademark-information","title":"Trademark Information","text":"<ul> <li>Intrudex\u2122: Trademark of ToolsHive</li> <li>Usage Guidelines: Proper attribution required</li> <li>Commercial Use: Permitted under license terms</li> </ul>"},{"location":"about.html#about-the-developer","title":"About the Developer","text":""},{"location":"about.html#armoghan-ul-mohmin","title":"Armoghan-ul-Mohmin","text":"<p>Lead Developer &amp; Project Founder</p> <p>Armoghan-ul-Mohmin is a passionate security researcher and software engineer dedicated to making enterprise-grade security tools accessible to organizations worldwide. With extensive experience in cybersecurity and software development, he leads the Intrudex project with a vision of democratizing security monitoring.</p>"},{"location":"about.html#connect-with-the-developer","title":"Connect with the Developer","text":"<ul> <li>LinkedIn: Armoghan-ul-Mohmin</li> <li>Github: Armoghan-ul-Mohmin </li> <li>Website: Armoghan.netlify.app</li> <li>Email: Armoghan@proton.me</li> </ul>"},{"location":"about.html#expertise-areas","title":"Expertise Areas","text":"<ul> <li>Cybersecurity: Threat detection, incident response, security architecture</li> <li>Software Development: Full-stack development, system architecture</li> <li>Security Research: Vulnerability research, security tool development</li> <li>Data Analysis: Security analytics, machine learning applications</li> </ul>"},{"location":"about.html#project-information","title":"Project Information","text":""},{"location":"about.html#current-status","title":"Current Status","text":"<ul> <li>Version: 1.0.0</li> <li>Release Date: 2025</li> <li>Development Status: Active development</li> <li>Community: Growing user and contributor base</li> </ul>"},{"location":"about.html#resources","title":"Resources","text":"<ul> <li>Official Repository: GitHub.com/ToolsHive/Intrudex</li> <li>Documentation: Intrudex Documentation</li> <li>Bug Reports: GitHub Issues</li> <li>Community Discussion: GitHub Discussions</li> </ul>"},{"location":"contact.html","title":"Contact Us","text":"<p>Get in touch with the Intrudex development team and community for support, questions, feature requests, and collaboration opportunities. We're committed to providing comprehensive assistance for all users and contributors.</p>"},{"location":"contact.html#primary-contact-channels","title":"Primary Contact Channels","text":""},{"location":"contact.html#github-repository","title":"GitHub Repository","text":"<p>For technical issues, feature requests, and code contributions</p>"},{"location":"contact.html#issues-tracker-github-issues","title":"Issues Tracker: GitHub Issues","text":"<ul> <li>Bug reports and technical problems</li> <li>Feature requests and enhancement suggestions</li> <li>Security vulnerability reports</li> <li>Documentation improvements</li> </ul>"},{"location":"contact.html#discussions-forum-github-discussions","title":"Discussions Forum: GitHub Discussions","text":"<ul> <li>General questions and community help</li> <li>Implementation guidance and best practices</li> <li>Use case sharing and success stories</li> <li>Community announcements and updates</li> </ul>"},{"location":"contact.html#pull-requests-github-pull-requests","title":"Pull Requests: GitHub Pull Requests","text":"<ul> <li>Code contributions and improvements</li> <li>Documentation updates and corrections</li> <li>Translation and localization efforts</li> <li>Community-driven enhancements</li> </ul>"},{"location":"contact.html#developer-contact-information","title":"Developer Contact Information","text":""},{"location":"contact.html#armoghan-ul-mohmin","title":"Armoghan-ul-Mohmin","text":"<p>Lead Developer &amp; Project Founder</p>"},{"location":"contact.html#linkedin-armoghan-ul-mohmin","title":"LinkedIn: Armoghan-ul-Mohmin","text":"<ul> <li>Professional networking and business inquiries</li> <li>Partnership and collaboration opportunities</li> <li>Career-related discussions</li> <li>Industry connections and knowledge sharing</li> </ul>"},{"location":"contact.html#personal-website-armoghannetlifyapp","title":"Personal Website: Armoghan.netlify.app","text":"<ul> <li>Portfolio and professional background</li> <li>Blog posts and technical articles</li> <li>Project showcases and achievements</li> <li>Contact form for direct communication</li> </ul>"},{"location":"contact.html#github-profile-armoghan-ul-mohmin","title":"GitHub Profile: @Armoghan-ul-Mohmin","text":"<ul> <li>Open source contributions and projects</li> <li>Code repositories and development activity</li> <li>Technical discussions and collaborations</li> <li>Community involvement and leadership</li> </ul>"},{"location":"contact.html#areas-of-expertise","title":"Areas of Expertise","text":"<ul> <li>Cybersecurity: Threat detection, incident response, security architecture</li> <li>Software Development: Full-stack development, system design, performance optimization</li> <li>Security Research: Vulnerability analysis, security tool development, threat intelligence</li> <li>Data Analysis: Security analytics, machine learning, data visualization</li> </ul>"},{"location":"contact.html#community-support-channels","title":"Community Support Channels","text":""},{"location":"contact.html#discussion-forums","title":"Discussion Forums","text":"<p>GitHub Discussions</p> <ul> <li>Q&amp;A Section: Technical questions and troubleshooting</li> <li>General Discussion: Community conversations and feedback</li> <li>Ideas and Suggestions: Feature proposals and improvements</li> <li>Show and Tell: Success stories and implementation examples</li> </ul> <p>Community Guidelines:</p> <ul> <li>Be respectful and professional in all interactions</li> <li>Provide detailed information when asking for help</li> <li>Search existing discussions before posting new questions</li> <li>Follow the code of conduct and community standards</li> </ul>"},{"location":"contact.html#documentation-and-knowledge-base","title":"Documentation and Knowledge Base","text":"<p>Official Documentation</p> <ul> <li>Installation Guides: Comprehensive deployment instructions</li> <li>Configuration Reference: Detailed parameter explanations</li> <li>API Documentation: Complete endpoint reference</li> <li>Troubleshooting Guides: Common issues and solutions</li> </ul> <p>Community Contributions</p> <ul> <li>User Guides: Community-created tutorials and walkthroughs</li> <li>Best Practices: Implementation recommendations and optimization tips</li> <li>Case Studies: Real-world deployment examples</li> <li>Integration Examples: Third-party tool integration guides</li> </ul>"},{"location":"contact.html#how-to-report-security-vulnerabilities","title":"How to Report Security Vulnerabilities","text":""},{"location":"contact.html#responsible-disclosure-process","title":"Responsible Disclosure Process","text":"<p>Step 1: Initial Report</p> <ul> <li>Contact via GitHub security advisory or email</li> <li>Provide detailed vulnerability description</li> <li>Include proof-of-concept if available</li> <li>Specify affected versions and components</li> </ul> <p>Step 2: Verification and Assessment</p> <ul> <li>Development team reviews and validates the report</li> <li>Severity assessment and impact analysis</li> <li>Timeline estimation for resolution</li> <li>Coordination with reporter for additional information</li> </ul> <p>Step 3: Resolution and Disclosure</p> <ul> <li>Development of fix and testing procedures</li> <li>Coordinated release with security advisory</li> <li>Public disclosure following resolution</li> <li>Credit and acknowledgment for responsible reporting</li> </ul>"},{"location":"contact.html#security-contact-guidelines","title":"Security Contact Guidelines","text":"<ul> <li>Do not publicly disclose vulnerabilities before resolution</li> <li>Provide sufficient detail for reproduction and validation</li> <li>Allow reasonable time for investigation and resolution</li> <li>Coordinate with the development team for public disclosure</li> </ul>"},{"location":"contact.html#follow-us-and-stay-updated","title":"Follow Us and Stay Updated","text":""},{"location":"contact.html#project-updates","title":"Project Updates","text":"<ul> <li>GitHub Releases: Intrudex Releases</li> <li>GitHub Discussions: Community announcements and updates</li> <li>Documentation Site: Latest guides and documentation updates</li> </ul>"},{"location":"contact.html#developer-updates","title":"Developer Updates","text":"<ul> <li>LinkedIn Posts: Professional updates and industry insights</li> <li>Personal Website: Blog posts and technical articles</li> <li>GitHub Activity: Code contributions and project developments</li> </ul> <p>Thank you for your interest in Intrudex. We look forward to hearing from you and supporting your security monitoring journey. Whether you're reporting a bug, requesting a feature, seeking professional services, or just saying hello, we're here to help.</p>"},{"location":"overview.html","title":"Overview","text":""},{"location":"overview.html#title-overview","title":"title: Overview","text":""},{"location":"why-intrudex.html","title":"Why Choose Intrudex","text":"<p>Intrudex stands out in the crowded security monitoring landscape by offering enterprise-grade capabilities through an open-source platform. This page provides a comprehensive analysis of why Intrudex is the optimal choice for organizations seeking robust security monitoring solutions.</p>"},{"location":"why-intrudex.html#core-value-proposition","title":"Core Value Proposition","text":""},{"location":"why-intrudex.html#cost-effective-enterprise-security","title":"Cost-Effective Enterprise Security","text":"<p>Traditional Enterprise Solutions:</p> <ul> <li>High licensing costs (often $50,000+ annually)</li> <li>Per-endpoint pricing models</li> <li>Vendor lock-in scenarios</li> <li>Limited customization options</li> </ul> <p>Intrudex Advantage:</p> <ul> <li>Open-source with MIT license</li> <li>No per-endpoint limitations</li> <li>Complete source code access</li> <li>Unlimited customization capabilities</li> </ul>"},{"location":"why-intrudex.html#modern-architecture-design","title":"Modern Architecture Design","text":"<p>Intrudex is built from the ground up with modern software engineering principles:</p> <ul> <li>Microservices Architecture: Scalable, maintainable components</li> <li>Container-Ready Deployment: Docker and Kubernetes support</li> <li>API-First Design: Comprehensive REST API coverage</li> <li>Cloud-Native Support: Multi-cloud deployment capabilities</li> </ul>"},{"location":"why-intrudex.html#detailed-feature-comparison","title":"Detailed Feature Comparison","text":""},{"location":"why-intrudex.html#intrudex-vs-aurora-by-nextron-systems","title":"Intrudex vs Aurora by Nextron Systems","text":"Feature Category Intrudex Aurora (Nextron) Licensing MIT Open Source Commercial/Proprietary Cost Structure Free Subscription-based Source Code Access Full access Closed source Customization Unlimited Limited to configuration Deployment Options Self-hosted, cloud, hybrid Primarily SaaS Rule Engine Sigma + Custom Proprietary + Sigma YARA Integration Supported Native integration IoC Management Built-in Advanced commercial features Threat Intelligence Community-driven Commercial feeds Scalability Horizontal scaling Vendor-managed scaling Data Retention User-controlled Subscription-tier dependent Multi-tenancy Self-implemented Native support Support Model Community + Professional Commercial support"},{"location":"why-intrudex.html#technical-architecture-comparison","title":"Technical Architecture Comparison","text":"<p>Aurora Strengths:</p> <ul> <li>Mature commercial threat intelligence integration</li> <li>Advanced YARA rule processing</li> <li>Professional support infrastructure</li> <li>Established enterprise customer base</li> </ul> <p>Intrudex Advantages:</p> <ul> <li>Complete control over data and infrastructure</li> <li>No vendor dependency for critical security operations</li> <li>Ability to modify detection algorithms</li> <li>No subscription costs for additional features</li> </ul>"},{"location":"why-intrudex.html#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Log Processing Throughput:</p> <ul> <li>Intrudex: 10,000+ events/second (single instance)</li> <li>Aurora: Variable based on subscription tier</li> </ul> <p>Detection Latency:</p> <ul> <li>Intrudex: Sub-second detection for real-time rules</li> <li>Aurora: Cloud-dependent latency</li> </ul> <p>Resource Utilization:</p> <ul> <li>Intrudex: Optimized for on-premise deployment</li> <li>Aurora: SaaS resource allocation</li> </ul>"},{"location":"why-intrudex.html#security-and-compliance-advantages","title":"Security and Compliance Advantages","text":""},{"location":"why-intrudex.html#data-sovereignty","title":"Data Sovereignty","text":"<p>Complete Data Control:</p> <ul> <li>All security data remains on your infrastructure</li> <li>No third-party cloud dependencies for sensitive information</li> <li>Compliance with strict data residency requirements</li> <li>Custom data retention and purging policies</li> </ul> <p>Audit and Compliance:</p> <ul> <li>Full audit trail of all system modifications</li> <li>Source code availability for security audits</li> <li>Custom compliance reporting capabilities</li> <li>Integration with existing compliance frameworks</li> </ul>"},{"location":"why-intrudex.html#security-first-design-principles","title":"Security-First Design Principles","text":"<p>End-to-End Security:</p> <ul> <li>TLS 1.3 encryption for all communications</li> <li>Certificate pinning for client-server communication</li> <li>Role-based access control with granular permissions</li> <li>Comprehensive logging of all security events</li> </ul> <p>Vulnerability Management:</p> <ul> <li>Transparent vulnerability disclosure process</li> <li>Community-driven security research</li> <li>Rapid patch deployment capabilities</li> <li>No dependency on vendor patch cycles</li> </ul>"},{"location":"why-intrudex.html#deployment-flexibility","title":"Deployment Flexibility","text":""},{"location":"why-intrudex.html#multi-environment-support","title":"Multi-Environment Support","text":"<p>On-Premise Deployment:</p> <ul> <li>Complete control over hardware and software stack</li> <li>Optimal performance for high-throughput environments</li> <li>Integration with existing data center infrastructure</li> <li>Custom security hardening implementations</li> </ul> <p>Cloud Deployment:</p> <ul> <li>Support for AWS, Azure, Google Cloud Platform</li> <li>Auto-scaling capabilities for variable workloads</li> <li>Geo-distributed deployment options</li> <li>Cloud-native security integration</li> </ul> <p>Hybrid Architectures:</p> <ul> <li>Multi-cloud data correlation</li> <li>Edge computing deployment scenarios</li> <li>Federated security monitoring</li> <li>Cross-environment threat correlation</li> </ul>"},{"location":"why-intrudex.html#scalability-models","title":"Scalability Models","text":"<p>Horizontal Scaling:</p> <ul> <li>Multiple server instances for load distribution</li> <li>Database clustering for high availability</li> <li>Distributed log processing capabilities</li> <li>Load balancer integration support</li> </ul> <p>Vertical Scaling:</p> <ul> <li>Optimized resource utilization</li> <li>Multi-core processing support</li> <li>Memory-efficient data structures</li> <li>SSD optimization for high-speed operations</li> </ul>"},{"location":"why-intrudex.html#community-and-ecosystem","title":"Community and Ecosystem","text":""},{"location":"why-intrudex.html#open-source-advantages","title":"Open Source Advantages","text":"<p>Community Innovation:</p> <ul> <li>Continuous feature development by global contributors</li> <li>Rapid bug fixes and security patches</li> <li>Shared knowledge base and best practices</li> <li>Collaborative threat intelligence sharing</li> </ul> <p>Ecosystem Integration:</p> <ul> <li>Native integration with popular security tools</li> <li>Custom connector development capabilities</li> <li>API-first architecture for third-party integrations</li> <li>Extensive documentation and community guides</li> </ul>"},{"location":"why-intrudex.html#professional-services-ecosystem","title":"Professional Services Ecosystem","text":"<p>Consulting Services:</p> <ul> <li>Implementation and deployment assistance</li> <li>Custom rule development services</li> <li>Security architecture consulting</li> <li>Performance optimization guidance</li> </ul> <p>Training and Certification:</p> <ul> <li>Comprehensive training programs</li> <li>Professional certification tracks</li> <li>Hands-on workshop availability</li> <li>Custom training for enterprise teams</li> </ul>"},{"location":"why-intrudex.html#risk-mitigation","title":"Risk Mitigation","text":""},{"location":"why-intrudex.html#vendor-risk-elimination","title":"Vendor Risk Elimination","text":"<p>No Vendor Lock-in:</p> <ul> <li>Complete data portability</li> <li>No proprietary data formats</li> <li>Open standards compliance</li> <li>Independent operational capability</li> </ul> <p>Business Continuity:</p> <ul> <li>No dependency on vendor business continuity</li> <li>Local expertise development</li> <li>In-house modification capabilities</li> <li>Emergency response independence</li> </ul>"},{"location":"why-intrudex.html#technical-risk-management","title":"Technical Risk Management","text":"<p>Security Vulnerability Response:</p> <ul> <li>Transparent vulnerability disclosure</li> <li>Community-driven security research</li> <li>Rapid patch development and deployment</li> <li>No dependency on vendor patch schedules</li> </ul> <p>Performance Risk Mitigation:</p> <ul> <li>Predictable resource requirements</li> <li>Local performance optimization</li> <li>Custom tuning capabilities</li> <li>No external service dependencies</li> </ul>"},{"location":"why-intrudex.html#decision-framework","title":"Decision Framework","text":""},{"location":"why-intrudex.html#when-to-choose-intrudex","title":"When to Choose Intrudex","text":"<p>Ideal Scenarios:</p> <ul> <li>Organizations with strong technical capabilities</li> <li>Requirements for complete data sovereignty</li> <li>Budget constraints with enterprise feature needs</li> <li>Custom security monitoring requirements</li> <li>Compliance with strict data residency regulations</li> </ul> <p>Success Indicators:</p> <ul> <li>Dedicated security team availability</li> <li>Investment in technical skill development</li> <li>Long-term security monitoring strategy</li> <li>Integration with existing security infrastructure</li> </ul>"},{"location":"why-intrudex.html#risk-considerations","title":"Risk Considerations","text":"<p>Potential Challenges:</p> <ul> <li>Initial learning curve for implementation</li> <li>Requirement for in-house technical expertise</li> <li>Self-managed infrastructure and maintenance</li> <li>Community-dependent support model</li> </ul> <p>Mitigation Strategies:</p> <ul> <li>Comprehensive training and documentation</li> <li>Professional services engagement</li> <li>Phased deployment approach</li> <li>Community engagement and contribution</li> </ul>"},{"location":"why-intrudex.html#conclusion","title":"Conclusion","text":"<p>Intrudex represents a paradigm shift in security monitoring, offering enterprise-grade capabilities through an open-source platform. The combination of cost-effectiveness, technical flexibility, and complete data sovereignty makes Intrudex an compelling choice for organizations seeking to enhance their security posture without vendor dependency.</p> <p>The platform's modern architecture, comprehensive feature set, and strong community support provide a foundation for both immediate security improvements and long-term strategic advantages. Organizations choosing Intrudex gain not just a security monitoring tool, but a platform for innovation and custom security solution development.</p>"},{"location":"installation/index.html","title":"Intrudex Enterprise Installation Overview","text":"<p>This comprehensive installation guide provides enterprise-grade deployment procedures for the Intrudex security monitoring platform across multiple environments and configurations.</p>"},{"location":"installation/index.html#enterprise-architecture-overview","title":"Enterprise Architecture Overview","text":"<p>Intrudex functions as a distributed security monitoring ecosystem comprising two core architectural components:</p> <ul> <li>Intrudex Client: High-performance C++ endpoint security agent engineered for Windows environments</li> <li>Intrudex Server: Enterprise-grade Python Flask-based centralized management platform</li> </ul> <pre><code>graph TB\n    subgraph \"Windows Endpoints\"\n        C1[Client Agent 1]\n        C2[Client Agent 2]\n        C3[Client Agent N]\n    end\n\n    subgraph \"Central Infrastructure\"\n        S[Intrudex Server]\n        DB[(Database)]\n        WEB[Web Dashboard]\n    end\n\n    subgraph \"External Services\"\n        SYS[Sysmon]\n        LOG[Windows Event Logs]\n    end\n\n    C1 --&gt;|HTTPS/REST API| S\n    C2 --&gt;|HTTPS/REST API| S\n    C3 --&gt;|HTTPS/REST API| S\n\n    S --&gt; DB\n    S --&gt; WEB\n\n    C1 --&gt; SYS\n    C1 --&gt; LOG\n\n    style S fill:#2d4a87\n    style WEB fill:#4a90e2\n    style DB fill:#5cb85c</code></pre>"},{"location":"installation/index.html#enterprise-deployment-strategy","title":"Enterprise Deployment Strategy","text":"<pre><code>flowchart TD\n    A[Infrastructure Assessment] --&gt; B{Environmental Analysis}\n    B --&gt;|Single Endpoint Deployment| C[Standalone Configuration]\n    B --&gt;|Enterprise Multi-Endpoint| D[Distributed Architecture]\n\n    C --&gt; E[Central Server Provisioning]\n    D --&gt; E\n\n    E --&gt; F[Database Infrastructure Configuration]\n    F --&gt; G[Client Agent Deployment]\n    G --&gt; H[Network Security Configuration]\n    H --&gt; I[Security Hardening Implementation]\n    I --&gt; J[Comprehensive Validation Testing]\n    J --&gt; K[Production Environment Ready]\n\n    style A fill:#f39c12\n    style K fill:#27ae60</code></pre>"},{"location":"installation/index.html#installation-roadmap","title":"Installation Roadmap","text":""},{"location":"installation/index.html#phase-1-server-infrastructure-deployment","title":"Phase 1: Server Infrastructure Deployment","text":"<p>Choose your server deployment strategy based on your environment:</p> Development EnvironmentProduction EnvironmentDocker DevelopmentDocker Production <p>Perfect for testing, development, and proof-of-concept deployments.</p> <p>Development Server Setup \u2192</p> <ul> <li>SQLite database</li> <li>Development server</li> <li>Local testing</li> <li>Quick setup</li> </ul> <p>Enterprise-ready deployment for production workloads.</p> <p>Production Server Setup \u2192 - Enterprise deployment guide</p> <ul> <li>PostgreSQL database</li> <li>Production optimizations</li> <li>Security hardening</li> <li>Service deployment</li> </ul> <p>Containerized development environment for consistent deployments.</p> <p>Docker Development Setup \u2192 - Container development guide</p> <ul> <li>Docker</li> <li>Development containers</li> <li>Volume mapping</li> <li>Easy cleanup</li> </ul> <p>Enterprise containerized deployment with orchestration support.</p> <p>Docker Production Setup \u2192 - Enterprise container deployment</p> <ul> <li>Docker Compose</li> <li>Production containers</li> <li>Security optimization</li> </ul>"},{"location":"installation/index.html#phase-2-client-agent-deployment","title":"Phase 2: Client Agent Deployment","text":"<p>Deploy security agents across your Windows infrastructure:</p> <p>Client Installation Guide \u2192</p> <ul> <li>Automated Installer: Recommended for enterprise deployment</li> <li>Portable Deployment: Custom installation paths (Coming Soon)</li> <li>Source Compilation: Advanced customization (Coming Soon)</li> </ul>"},{"location":"installation/index.html#prerequisites-overview","title":"Prerequisites Overview","text":""},{"location":"installation/index.html#general-requirements","title":"General Requirements","text":"<p>Before beginning installation, ensure the following prerequisites are met:</p>"},{"location":"installation/index.html#network-infrastructure","title":"Network Infrastructure","text":"<ul> <li>Connectivity: HTTPS connectivity between clients and server</li> <li>Firewall: Proper firewall rules configured</li> <li>DNS: Name resolution functioning correctly</li> <li>Certificates: TLS certificates for production deployments</li> </ul>"},{"location":"installation/index.html#security-requirements","title":"Security Requirements","text":"<ul> <li>Administrative Access: Required for service installation</li> <li>Antivirus Exclusions: Configure exclusions for Intrudex components</li> <li>Group Policy: Enterprise deployment considerations</li> <li>Certificate Validation: PKI infrastructure for certificate management</li> </ul>"},{"location":"installation/index.html#quick-start-guide","title":"Quick Start Guide","text":"<p>For rapid deployment testing, follow this streamlined approach:</p> <ol> <li> <p>Server Development Setup (15 minutes)    <pre><code>git clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex/Intrudex-Server\npip install -r requirements.txt\nnpm install\nnpm run build\nflask db init\nflask db migrate -m \"Initial migration\"\nflask db upgrade\n</code></pre></p> </li> <li> <p>Client Installation (5 minutes)    <pre><code># Download and run installer\nIntrudex-Client-Setup.exe\n</code></pre></p> </li> <li> <p>Validation (2 minutes)    <pre><code>curl -k https://localhost:80/login\n</code></pre></p> </li> </ol>"},{"location":"installation/index.html#next-steps","title":"Next Steps","text":"<p>Choose your installation path:</p> <ul> <li> <p> Windows Client</p> <p>Deploy security agents on Windows endpoints</p> <p>Start Client Installation \u2192</p> </li> <li> <p> Development Server</p> <p>Set up development environment quickly</p> <p>Start Development Setup \u2192</p> </li> <li> <p> Production Server</p> <p>Deploy enterprise production environment</p> <p>Production Setup Guide \u2192</p> </li> <li> <p> Docker Deployment</p> <p>Containerized deployment options</p> <p>Docker Deployment Guides \u2192</p> </li> </ul>"},{"location":"installation/client/index.html","title":"Intrudex Client Installation Guide","text":"<p>The Intrudex Client is a sophisticated, lightweight, high-performance C++ security service specifically engineered for continuous enterprise security monitoring across Windows endpoint infrastructures.</p>"},{"location":"installation/client/index.html#client-architecture-overview","title":"Client Architecture Overview","text":"<p>Enterprise Client Capabilities</p> <p>The Intrudex Client provides real-time log analysis capabilities, implements Sigma rule-based threat detection methodologies, and ensures seamless integration with centralized management infrastructure while maintaining minimal system resource utilization.</p>"},{"location":"installation/client/index.html#enterprise-client-capabilities-matrix","title":"Enterprise Client Capabilities Matrix","text":"<pre><code>graph TB\n    subgraph \"Log Collection\"\n        A1[Windows Event Log Integration]\n        A2[Sysmon Advanced Integration]\n        A3[Custom Log Source Support] \n        A4[Real-time Log Streaming]\n    end\n\n    subgraph \"Threat Detection\"\n        B1[Sigma Rules Engine]\n        B2[Real-time Behavioral Analysis]\n        B3[Advanced Pattern Matching]\n        B4[Threat Intelligence Integration]\n    end\n\n    subgraph \"Secure Communication\"\n        C1[Enterprise REST API Client]\n        C2[TLS 1.3 Encryption]\n        C3[Automatic Failover Logic]\n        C4[Certificate Validation]\n    end\n\n    subgraph \"Enterprise Management\"\n        D1[Windows Service Integration]\n        D2[Centralized Configuration Management]\n        D3[Comprehensive Health Monitoring]\n        D4[Remote Administration Support]\n    end\n\n    style A1 fill:#3498db,stroke:#2980b9,color:#fff\n    style A2 fill:#3498db,stroke:#2980b9,color:#fff\n    style A3 fill:#3498db,stroke:#2980b9,color:#fff\n    style A4 fill:#3498db,stroke:#2980b9,color:#fff\n\n    style B1 fill:#e74c3c,stroke:#c0392b,color:#fff\n    style B2 fill:#e74c3c,stroke:#c0392b,color:#fff\n    style B3 fill:#e74c3c,stroke:#c0392b,color:#fff\n    style B4 fill:#e74c3c,stroke:#c0392b,color:#fff\n\n    style C1 fill:#27ae60,stroke:#229954,color:#fff\n    style C2 fill:#27ae60,stroke:#229954,color:#fff\n    style C3 fill:#27ae60,stroke:#229954,color:#fff\n    style C4 fill:#27ae60,stroke:#229954,color:#fff\n\n    style D1 fill:#f39c12,stroke:#e67e22,color:#fff\n    style D2 fill:#f39c12,stroke:#e67e22,color:#fff\n    style D3 fill:#f39c12,stroke:#e67e22,color:#fff\n    style D4 fill:#f39c12,stroke:#e67e22,color:#fff</code></pre>"},{"location":"installation/client/index.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/client/index.html#minimum-technical-specifications","title":"Minimum Technical Specifications","text":"<ul> <li>Operating System: Windows 10 (Build 1809 or later) / Windows Server 2016 or subsequent versions</li> <li>Memory Allocation: 100 MB RAM (typical operational usage)</li> <li>Storage Requirements: 50 MB available disk space</li> <li>Network Connectivity: Secure HTTPS connectivity to Intrudex Server infrastructure</li> <li>Administrative Privileges: Elevated rights required for installation and service management operations</li> </ul>"},{"location":"installation/client/index.html#enterprise-platform-support-matrix","title":"Enterprise Platform Support Matrix","text":"Windows 10/11 ProfessionalWindows Server Infrastructure <ul> <li>Professional, Enterprise, and Education editions fully supported</li> <li>Home edition supported with feature limitations</li> </ul> <ul> <li>Windows Server 2016, 2019, 2022 fully certified</li> <li>Windows Server Core deployments officially supported</li> </ul> <p>Platform Compatibility Notice</p> <p>The Intrudex Client is exclusively architected for Windows platform environments. Unix-based systems (Linux, macOS) are not supported for client deployment.</p>"},{"location":"installation/client/index.html#installation-methods","title":"Installation Methods","text":"<p>Choose the deployment methodology that optimally aligns with your organizational security requirements:</p> <pre><code>graph LR\n    A[Enterprise Deployment Options] --&gt; B[Automated Enterprise Installer]\n    A --&gt; C[Manual Custom Deployment]\n    A --&gt; D[Source Code Compilation]\n\n    B --&gt; B1[Single-Click Enterprise Install]\n    B --&gt; B2[Silent Enterprise Deployment]\n    B --&gt; B3[Group Policy Mass Deployment]\n\n    C --&gt; C1[Portable Enterprise Installation]\n    C --&gt; C2[Custom Directory Configuration]\n    C --&gt; C3[Manual Service Integration]\n\n    D --&gt; D1[Custom Enterprise Compilation]\n    D --&gt; D2[Development Environment Setup]\n    D --&gt; D3[Advanced Security Configurations]\n\n    style B fill:#27ae60\n    style C fill:#f39c12\n    style D fill:#e74c3c</code></pre>"},{"location":"installation/client/index.html#method-comparison","title":"Method Comparison","text":"Feature Automated Installer Portable Deployment Source Compilation Ease of Use \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50 Customization \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Enterprise Ready \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 Security Audit \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Mass Deployment \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50"},{"location":"installation/client/index.html#installation-methods_1","title":"Installation Methods","text":"<ul> <li> <p> Automated Installer</p> <p>Recommended for Production Environments</p> <p>Streamlined deployment with comprehensive system integration</p> <ul> <li>Windows Service registration</li> <li>Security policy configuration</li> <li>Silent installation support</li> <li>Group Policy deployment</li> </ul> <p>Install with Automated Installer \u2192</p> </li> <li> <p> Portable Deployment</p> <p>Advanced Configuration Management</p> <p>Ideal for custom installation paths and advanced configuration</p> <ul> <li>Custom directory installation</li> <li>Manual configuration control</li> <li>Portable executable</li> <li>Service registration options</li> </ul> <p>Deploy Portable Version \u2192</p> </li> <li> <p> Source Compilation</p> <p>Advanced Enterprise Users</p> <p>For organizations requiring source code auditing and custom modifications</p> <ul> <li>Complete source code access</li> <li>Custom build configurations</li> <li>Development environment</li> <li>Advanced security options</li> </ul> <p>Build from Source \u2192</p> </li> </ul>"},{"location":"installation/client/index.html#command-line-interface","title":"Command Line Interface","text":"<p>The Intrudex Client provides an extensive command-line interface for enterprise deployment and management:</p> <p></p>"},{"location":"installation/client/index.html#core-operations","title":"Core Operations","text":"Parameter Short Form Description Usage Example <code>--help</code> <code>-h</code> Display comprehensive help information <code>intrudex-client.exe -h</code> <code>--version</code> Show version and build information <code>intrudex-client.exe --version</code> <code>--verbose</code> <code>-v</code> Enable detailed logging output <code>intrudex-client.exe -v</code> <code>--config &lt;path&gt;</code> Specify custom configuration file location <code>intrudex-client.exe --config \"C:\\config\\custom.json\"</code> <code>--background</code> Execute as background service (default) <code>intrudex-client.exe --background</code> <code>--foreground</code> Run in foreground for debugging <code>intrudex-client.exe --foreground</code> <code>--status</code> Display current operational status <code>intrudex-client.exe --status</code> <code>--check-health</code> Perform comprehensive system health check <code>intrudex-client.exe --check-health</code>"},{"location":"installation/client/index.html#sysmon-integration","title":"Sysmon Integration","text":"Parameter Description Usage Example <code>--reinstall-sysmon</code> Reinstall Sysmon with default configuration <code>intrudex-client.exe --reinstall-sysmon</code> <code>--custom-sysmon &lt;path&gt;</code> Deploy Sysmon with custom configuration <code>intrudex-client.exe --custom-sysmon \"C:\\configs\\sysmon.xml\"</code> <code>--sysmon-config</code> Show active Sysmon configuration <code>intrudex-client.exe --sysmon-config</code> <code>--sysmon-uninstall</code> Remove Sysmon installation <code>intrudex-client.exe --sysmon-uninstall</code>"},{"location":"installation/client/index.html#collector-management","title":"Collector Management","text":"Parameter Description Usage Example <code>--disable-collector &lt;name&gt;</code> Disable specific log collector <code>intrudex-client.exe --disable-collector sysmon</code> <p>Available collectors: <code>sysmon</code>, <code>security</code>, <code>system</code>, <code>application</code></p>"},{"location":"installation/client/windows-installer.html","title":"Automated Installer Deployment","text":"<p>The automated enterprise installer provides the most streamlined deployment experience with comprehensive system integration capabilities, making it the recommended method for production environments.</p>"},{"location":"installation/client/windows-installer.html#installer-overview","title":"Installer Overview","text":"<p>Enterprise Installer Features</p> <p>The <code>Intrudex-Client-Setup.exe</code> installer provides complete automation for enterprise deployments with built-in security configurations, service registration, and mass deployment capabilities.</p>"},{"location":"installation/client/windows-installer.html#key-features","title":"Key Features","text":"<ul> <li>Automated Dependency Resolution: Automatically handles all required dependencies</li> <li>Windows Service Registration: Configures and registers the client as a Windows service</li> <li>Enterprise Security Configuration: Applies enterprise security policies automatically</li> <li>Registry Integration: Proper registry entries for system integration</li> <li>Silent Installation Support: Command-line options for mass deployment</li> <li>Comprehensive Uninstallation: Complete removal capability when needed</li> </ul>"},{"location":"installation/client/windows-installer.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/client/windows-installer.html#minimum-technical-specifications","title":"Minimum Technical Specifications","text":"<ul> <li>Operating System: Windows 10 Build 1809+ / Windows Server 2016+</li> <li>Memory: 100 MB RAM available</li> <li>Storage: 50 MB free disk space</li> <li>Network: HTTPS connectivity to Intrudex Server</li> <li>Privileges: Administrative rights required</li> </ul>"},{"location":"installation/client/windows-installer.html#enterprise-environment-prerequisites","title":"Enterprise Environment Prerequisites","text":"<ul> <li>Group Policy: Configure software installation policies (if applicable)</li> <li>Antivirus Exclusions: Add Intrudex installation directory to exclusions</li> <li>Certificate Validation: Verify digital signature validation is enabled</li> <li>Network Access: Ensure access to GitHub releases and Intrudex Server</li> </ul>"},{"location":"installation/client/windows-installer.html#installation-process","title":"Installation Process","text":""},{"location":"installation/client/windows-installer.html#step-1-installer-acquisition","title":"Step 1: Installer Acquisition","text":"<p>Download the latest enterprise installer from the official repository:</p> <ol> <li>Navigate to GitHub Releases</li> <li>Locate the latest stable release</li> <li>Download <code>Intrudex-Client-Setup.exe</code> </li> <li>Verify digital signature (recommended for security compliance)</li> </ol>"},{"location":"installation/client/windows-installer.html#step-2-digital-signature-verification","title":"Step 2: Digital Signature Verification","text":"<p>Security Best Practice</p> <p>Always verify the digital signature before executing the installer in production environments.</p> Windows GUI MethodPowerShell Method <ol> <li>Right-click <code>Intrudex-Client-Setup.exe</code></li> <li>Select Properties</li> <li>Navigate to Digital Signatures tab</li> <li>Verify the signature is valid and from trusted publisher</li> </ol> <pre><code># Verify digital signature\nGet-AuthenticodeSignature -FilePath \"Intrudex-Client-Setup.exe\"\n\n# Expected output should show:\n# Status: Valid\n# SignerCertificate: [Certificate details]\n</code></pre>"},{"location":"installation/client/windows-installer.html#step-3-interactive-installation","title":"Step 3: Interactive Installation","text":"<p>For standard desktop deployments with user interaction:</p> <ol> <li>Execute <code>Intrudex-Client-Setup.exe</code> with administrative privileges</li> <li>Follow the installation wizard prompts</li> <li>Configure server connection settings when prompted</li> <li>Complete the installation process</li> </ol>"},{"location":"installation/client/windows-installer.html#installation-wizard-steps","title":"Installation Wizard Steps","text":""},{"location":"installation/client/windows-installer.html#flowchart-td-alaunch-installer----badministrator-privileges-check-b----cwelcome-screen-c----dlicense-agreement-d----einstallation-directory-selection-e----fserver-configuration-f----gservice-configuration-g----hinstallation-progress-h----icompletion-screen-style-a-fill3498db-style-i-fill27ae60","title":"<pre><code>flowchart TD\n    A[Launch Installer] --&gt; B[Administrator Privileges Check]\n    B --&gt; C[Welcome Screen]\n    C --&gt; D[License Agreement]\n    D --&gt; E[Installation Directory Selection]\n    E --&gt; F[Server Configuration]\n    F --&gt; G[Service Configuration]\n    G --&gt; H[Installation Progress]\n    H --&gt; I[Completion Screen]\n\n    style A fill:#3498db\n    style I fill:#27ae60</code></pre>","text":""},{"location":"installation/client/windows-installer.html#post-installation-verification","title":"Post-Installation Verification","text":""},{"location":"installation/client/windows-installer.html#service-verification","title":"Service Verification","text":"<p>Verify the Intrudex Client service is properly installed and running:</p> <pre><code># Check service status\nGet-Service -Name \"IntrudexClient\"\n\n# Expected output:\n# Status: Running\n# Name: IntrudexClient\n# DisplayName: Intrudex Security Monitoring Client\n\n# View service configuration\nsc query IntrudexClient\nsc qc IntrudexClient\n</code></pre>"},{"location":"installation/client/windows-installer.html#installation-verification","title":"Installation Verification","text":"<p>Verify the client installation and configuration:</p> <pre><code># Navigate to installation directory\ncd \"C:\\Program Files\\Intrudex\"\n\n# Check client status\nintrudex-client.exe --status\n\n# Perform health check\nintrudex-client.exe --check-health\n\n# View version information\nintrudex-client.exe --version\n</code></pre>"},{"location":"installation/client/windows-installer.html#network-connectivity-test","title":"Network Connectivity Test","text":"<p>Verify connectivity to the Intrudex Server:</p> <pre><code># Test HTTPS connectivity to server\nTest-NetConnection -ComputerName \"your-server.domain.com\" -Port 80\n\n# Verify API endpoint accessibility\nInvoke-WebRequest -Uri \"https://your-server.domain.com/api -UseBasicParsing\n</code></pre>"},{"location":"installation/client/windows-installer.html#configuration","title":"Configuration","text":""},{"location":"installation/client/windows-installer.html#server-connection-configuration","title":"Server Connection Configuration","text":"<p>After installation, configure the connection to your Intrudex Server:</p> <ol> <li>Navigate to the installation directory</li> <li>Edit <code>config\\client_config.json</code></li> <li>Configure server connection parameters:</li> </ol> <p><pre><code>{\n  \"sysmon_exe_path\": \"assets/Sysmon64.exe\",\n  \"sysmon_config_path\": \"config/sysmonconfig-export.xml\",\n  \"sysmon_url\": \"http://your-server.domain.com/api/logs/sysmon/\",\n  \"application_url\": \"https://your-server.domain.com/api/logs/application\",\n  \"security_url\": \"http://your-server.domain.com/api/logs/security\",\n  \"system_url\": \"http://your-server.domain.com/api/logs/system\",\n  \"system_event_log_source\": \"System\",\n  \"application_log_source\": \"Application\",\n  \"security_event_log_source\": \"Security\",\n  \"event_log_source\": \"Microsoft-Windows-Sysmon/Operational\",\n  \"event_filter\": \"*[System[(Level=4 or Level=0)]]\",\n  \"sleep_interval_ms\": 1000,\n  \"log_level\": \"debug\",\n  \"send_events\": true,\n\n  \"http_config\": {\n    \"user_agent\": \"Intrudex Client/1.0\",\n    \"content_type\": \"application/xml\",\n    \"use_https\": false\n  },\n  \"default_flag\": \"background\",\n  \"sigma_url\": \"http://your-server.domain.com/api/logs/sigma\",\n  \"sigma_event_log_source\": \"Security\",\n  \"sigma_event_filter\": \"*[System[(Level=4 or Level=0)]]\",\n  \"sigma_sleep_interval_ms\": 1000,\n  \"sigma_log_level\": \"info\",\n  \"sigma_rules_dir\": \"rules/sigma/\",\n  \"sigma_config_path\": \"config/sigma_config.json\"\n}\n</code></pre> 4. Create and Edit  <code>config\\sigma_config.json</code></p> <pre><code>{\n  \"api_base_url\": \"http://localhost/sigma/api\",\n  \"headers\": {\n    \"X-API-Key\": \"&lt;Your-API-KEY&gt;\",\n    \"Authorization\": \"&lt;Your-API-KEY&gt;\",\n    \"Accept\": \"application/json\"\n  }\n}\n</code></pre>"},{"location":"installation/client/windows-installer.html#service-configuration","title":"Service Configuration","text":"<p>Configure the Windows service parameters:</p> <pre><code># Set service to start automatically\nsc config IntrudexClient start=auto\n\n# Set service recovery options\nsc failure IntrudexClient reset=86400 actions=restart/5000/restart/5000/restart/5000\n\n# Set service description\nsc description IntrudexClient \"Intrudex Enterprise Security Monitoring Client Agent\"\n</code></pre>"},{"location":"installation/client/windows-installer.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/client/windows-installer.html#common-installation-issues","title":"Common Installation Issues","text":"<p>Installer Won't Start</p> <p>Symptom: Double-clicking installer shows no response</p> <p>Resolution: 1. Verify administrative privileges 2. Check Windows Event Logs for errors 3. Disable antivirus temporarily during installation 4. Verify installer file integrity</p> <p>Installation Fails with Error Code</p> <p>Symptom: Installation terminates with error code</p> <p>Resolution: 1. Run installer with <code>/LOG=\"C:\\temp\\install.log\"</code> parameter 2. Review installation log for specific errors 3. Ensure sufficient disk space available 4. Verify Windows Installer service is running</p> <p>Service Won't Start After Installation</p> <p>Symptom: Intrudex Client service fails to start</p> <p>Resolution: 1. Check Windows Event Logs for service errors 2. Verify configuration file syntax 3. Test network connectivity to server 4. Ensure proper file permissions on installation directory</p>"},{"location":"installation/client/windows-installer.html#uninstallation","title":"Uninstallation","text":""},{"location":"installation/client/windows-installer.html#standard-uninstallation","title":"Standard Uninstallation","text":"<p>Remove the Intrudex Client using standard Windows methods:</p> <ol> <li>Open Control Panel \u2192 Programs and Features</li> <li>Locate \"Intrudex Client\" in the program list</li> <li>Select and click \"Uninstall\"</li> <li>Follow the uninstallation wizard prompts</li> </ol>"},{"location":"installation/client/windows-installer.html#silent-uninstallation","title":"Silent Uninstallation","text":"<p>For automated uninstallation in enterprise environments:</p> <pre><code># Find uninstall string from registry\n$UninstallPath = Get-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | \n    Where-Object {$_.DisplayName -like \"*Intrudex*\"} | \n    Select-Object -ExpandProperty UninstallString\n\n# Execute silent uninstallation\nStart-Process -FilePath $UninstallPath -ArgumentList \"/S\" -Wait\n</code></pre>"},{"location":"installation/client/windows-installer.html#manual-cleanup-if-required","title":"Manual Cleanup (If Required)","text":"<p>If standard uninstallation fails, perform manual cleanup:</p> <pre><code># Stop service\nStop-Service -Name \"Intrudex-Client\" -Force\n\n# Remove service\nsc delete Intrudex-Client\n\n# Remove installation directory\nRemove-Item -Path \"C:\\Program Files\\Intrudex\" -Recurse -Force\n\n# Clean registry entries\nRemove-Item -Path \"HKLM:\\SOFTWARE\\Intrudex\" -Recurse -Force\n</code></pre>"},{"location":"installation/client/windows-portable.html","title":"Portable Deployment","text":"<p>This guide provides instructions for deploying the Intrudex Client using the portable deployment method, which offers maximum flexibility for custom installation paths, advanced configuration management, and specialized enterprise requirements.</p>"},{"location":"installation/client/windows-portable.html#portable-deployment-overview","title":"Portable Deployment Overview","text":"<p>Portable Deployment Features</p> <p>The portable deployment method provides complete control over installation paths, configuration management, and service integration, making it ideal for organizations with specific security policies or custom directory structures.</p>"},{"location":"installation/client/windows-portable.html#portable-deployment-benefits","title":"Portable Deployment Benefits","text":"<ul> <li>Custom Installation Paths: Deploy to any directory structure</li> <li>Manual Configuration Control: Full control over all configuration parameters</li> <li>No Registry Dependencies: Minimal system footprint</li> <li>Portable Execution: Run from removable media or network shares</li> <li>Service Integration Options: Choose how to integrate with Windows services</li> <li>Advanced Security Configuration: Custom security policies and permissions</li> </ul> <pre><code>graph TB\n    subgraph \"Portable Deployment Process\"\n        A[Download Portable Package]\n        B[Extract to Target Directory]\n        C[Custom Configuration]\n        D[Service Registration]\n        E[Validation Testing]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n\n    style A fill:#3498db\n    style B fill:#f39c12\n    style C fill:#e74c3c\n    style D fill:#27ae60\n    style E fill:#9b59b6</code></pre>"},{"location":"installation/client/windows-portable.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/client/windows-portable.html#minimum-specifications","title":"Minimum Specifications","text":"<ul> <li>Operating System: Windows 10 (Build 1809+) / Windows Server 2016+</li> <li>Memory: 100 MB RAM available</li> <li>Storage: 100 MB free disk space (including logs and configuration)</li> <li>Network: HTTPS connectivity to Intrudex Server</li> <li>Permissions: Administrative privileges for service registration</li> </ul>"},{"location":"installation/client/windows-portable.html#advanced-requirements","title":"Advanced Requirements","text":"<ul> <li>PowerShell: Version 5.1 or later (for advanced scripting)</li> <li>Windows Management Framework: 5.1 or later</li> <li>Microsoft Visual C++ Redistributable: 2019 or later</li> </ul>"},{"location":"installation/client/windows-portable.html#download-and-extraction","title":"Download and Extraction","text":""},{"location":"installation/client/windows-portable.html#step-1-download-portable-package","title":"Step 1: Download Portable Package","text":"<p>Download the latest portable package from the official repository:</p> <p></p>"},{"location":"installation/client/windows-portable.html#step-2-extract-to-target-directory","title":"Step 2: Extract to Target Directory","text":"<p>Extract the portable package to your desired location:</p>"},{"location":"installation/client/windows-portable.html#extract-the-portable-package","title":"Extract the Portable Package","text":"Windows (PowerShell)Linux (Shell)macOS (Terminal) <pre><code># Define target directory\n$TargetDirectory = \"C:\\Intrudex/Intrudex-Client\"\n$ZipPath = \"Downloads\\Intrudex\\Intrudex-Client.zip\"\n\n# Create target directory if it doesn't exist\nif (-not (Test-Path $TargetDirectory)) {\n    New-Item -ItemType Directory -Path $TargetDirectory -Force\n}\n\n# Extract portable package\nExpand-Archive -Path $ZipPath -DestinationPath $TargetDirectory -Force\n\n# Verify extraction\nGet-ChildItem -Path $TargetDirectory\n</code></pre> <pre><code># Define target directory\nTARGET_DIR=\"$HOME/intrudex-client\"\nZIP_PATH=\"$HOME/Downloads/Intrudex-Client.zip\"\n\n# Create target directory if it doesn't exist\nmkdir -p \"$TARGET_DIR\"\n\n# Extract portable package\nunzip \"$ZIP_PATH\" -d \"$TARGET_DIR\"\n\n# Verify extraction\nls -l \"$TARGET_DIR\"\n</code></pre> <pre><code># Define target directory\nTARGET_DIR=\"$HOME/intrudex-client\"\nZIP_PATH=\"$HOME/Downloads/Intrudex-Client.zip\"\n\n# Create target directory if it doesn't exist\nmkdir -p \"$TARGET_DIR\"\n\n# Extract portable package\nunzip \"$ZIP_PATH\" -d \"$TARGET_DIR\"\n\n# Verify extraction\nls -l \"$TARGET_DIR\"\n</code></pre>"},{"location":"installation/client/windows-portable.html#configuration-management","title":"Configuration Management","text":""},{"location":"installation/client/windows-portable.html#step-1-primary-configuration","title":"Step 1: Primary Configuration","text":"<p>Configure the main client settings <code>config/client_config.json</code> and <code>config/sigma_config.json</code>:</p> client_config.jsonsigma_config.json <pre><code>    {\n         \"sysmon_exe_path\": \"assets/Sysmon64.exe\",\n         \"sysmon_config_path\": \"config/sysmonconfig-export.xml\",\n         \"sysmon_url\": \"http://your-server.domain.com/api/logs/sysmon/\",\n         \"application_url\": \"https://your-server.domain.com/api/logs/application\",\n         \"security_url\": \"http://your-server.domain.com/api/logs/security\",\n         \"system_url\": \"http://your-server.domain.com/api/logs/system\",\n         \"system_event_log_source\": \"System\",\n         \"application_log_source\": \"Application\",\n         \"security_event_log_source\": \"Security\",\n         \"event_log_source\": \"Microsoft-Windows-Sysmon/Operational\",\n         \"event_filter\": \"*[System[(Level=4 or Level=0)]]\",\n         \"sleep_interval_ms\": 1000,\n         \"log_level\": \"debug\",\n         \"send_events\": true,\n\n         \"http_config\": {\n           \"user_agent\": \"Intrudex Client/1.0\",\n           \"content_type\": \"application/xml\",\n           \"use_https\": false\n         },\n         \"default_flag\": \"background\",\n         \"sigma_url\": \"http://your-server.domain.com/api/logs/sigma\",\n         \"sigma_event_log_source\": \"Security\",\n         \"sigma_event_filter\": \"*[System[(Level=4 or Level=0)]]\",\n         \"sigma_sleep_interval_ms\": 1000,\n         \"sigma_log_level\": \"info\",\n         \"sigma_rules_dir\": \"rules/sigma/\",\n         \"sigma_config_path\": \"config/sigma_config.json\"\n     }\n</code></pre> <pre><code>    {\n       \"api_base_url\": \"http://localhost/sigma/api\",\n       \"headers\": {\n         \"X-API-Key\": \"&lt;Your-API-KEY&gt;\",\n         \"Authorization\": \"&lt;Your-API-KEY&gt;\",\n         \"Accept\": \"application/json\"\n       }\n     }\n</code></pre>"},{"location":"installation/client/windows-portable.html#step-3-sysmon-configuration","title":"Step 3: Sysmon Configuration","text":"<p>Configure Sysmon integration:</p> <pre><code># Copy and customize Sysmon configuration\n$SysmonConfigPath = \"config\\sysmon_config.xml\"\n\n# Download latest Sysmon configuration (optional)\n$SysmonConfigUrl = \"https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml\"\nInvoke-WebRequest -Uri $SysmonConfigUrl -OutFile $SysmonConfigPath -UseBasicParsing\n\n# Verify Sysmon configuration\n[xml]$SysmonConfig = Get-Content $SysmonConfigPath\nWrite-Host \"Sysmon configuration loaded: $($SysmonConfig.Sysmon.schemaversion)\" -ForegroundColor Green\n</code></pre>"},{"location":"installation/client/windows-portable.html#service-integration","title":"Service Integration","text":""},{"location":"installation/client/windows-portable.html#manual-service-registration","title":"Manual Service Registration","text":"<p>Register the Intrudex Client as a Windows service:</p> <pre><code># Service registration script\n$ServiceName = \"IntrudexClient\"\n$ServiceDisplayName = \"Intrudex Security Monitoring Client\"\n$ServiceDescription = \"Intrudex enterprise security monitoring client agent\"\n$ExecutablePath = Join-Path $TargetDirectory \"intrudex-client.exe\"\n$ServiceArguments = \"--background --config `\"$(Join-Path $TargetDirectory 'config\\client_config.json')`\"\"\n\n# Create service\nNew-Service -Name $ServiceName `\n            -DisplayName $ServiceDisplayName `\n            -Description $ServiceDescription `\n            -BinaryPathName \"`\"$ExecutablePath`\" $ServiceArguments\" `\n            -StartupType Automatic `\n            -Credential (Get-Credential -Message \"Enter service account credentials (or use LocalSystem)\")\n\n# Configure service recovery options\nsc.exe failure $ServiceName reset=86400 actions=restart/5000/restart/5000/restart/5000\n\n# Set service to restart on failure\nsc.exe config $ServiceName depend= \"Winmgmt\"\n\n# Start the service\nStart-Service -Name $ServiceName\n\n# Verify service status\nGet-Service -Name $ServiceName\n</code></pre>"},{"location":"installation/client/windows-portable.html#advanced-service-configuration","title":"Advanced Service Configuration","text":"<p>Configure advanced service parameters:</p> <pre><code># Service security configuration\n$ServiceSid = (Get-WmiObject -Class Win32_Service -Filter \"Name='$ServiceName'\").ProcessId\n$ServiceAccount = \"NT SERVICE\\$ServiceName\"\n\n# Grant necessary permissions\n$LogDirectory = Join-Path $TargetDirectory \"logs\"\n$ConfigDirectory = Join-Path $TargetDirectory \"config\"\n\n# Set directory permissions\nicacls $LogDirectory /grant \"${ServiceAccount}:(OI)(CI)F\" /T\nicacls $ConfigDirectory /grant \"${ServiceAccount}:(OI)(CI)R\" /T\n\n# Configure Windows Event Log permissions\nwevtutil sl Security /ca:O:BAG:SYD:(A;;0xf0007;;;SY)(A;;0x7;;;BA)(A;;0x1;;;BO)(A;;0x1;;;SO)(A;;0x1;;;S-1-5-32-573)\n\nWrite-Host \"Service security configuration completed\" -ForegroundColor Green\n</code></pre>"},{"location":"installation/client/windows-portable.html#validation-and-testing","title":"Validation and Testing","text":""},{"location":"installation/client/windows-portable.html#step-1-configuration-validation","title":"Step 1: Configuration Validation","text":"<p>Validate the client configuration:</p> <pre><code># Test configuration file\n&amp; \"$TargetDirectory\\intrudex-client.exe\" --config \"$TargetDirectory\\config\\client_config.json\" --validate-config\n\n# Test server connectivity\n&amp; \"$TargetDirectory\\intrudex-client.exe\" --config \"$TargetDirectory\\config\\client_config.json\" --test-connection\n\n# Perform health check\n&amp; \"$TargetDirectory\\intrudex-client.exe\" --config \"$TargetDirectory\\config\\client_config.json\" --check-health\n</code></pre>"},{"location":"installation/client/windows-portable.html#step-2-service-operation-testing","title":"Step 2: Service Operation Testing","text":"<p>Test service functionality:</p> <pre><code># Check service status\nGet-Service -Name $ServiceName | Format-Table -AutoSize\n\n# Test service start/stop\nStop-Service -Name $ServiceName\nStart-Service -Name $ServiceName\n\n# Monitor service logs\nGet-Content \"$TargetDirectory\\logs\\intrudex-client.log\" -Tail 20 -Wait\n</code></pre>"},{"location":"installation/client/windows-portable.html#step-3-integration-testing","title":"Step 3: Integration Testing","text":"<p>Test integration with Intrudex Server:</p> <pre><code># Test API connectivity\n$ApiEndpoint = \"https://your-intrudex-server.domain.com/api/logs\"\n$Headers = @{\n    \"Authorization\" = \"Bearer your-api-key\"\n    \"Content-Type\" = \"application/json\"\n}\n\ntry {\n    $Response = Invoke-RestMethod -Uri $ApiEndpoint -Headers $Headers -Method GET\n    Write-Host \"\u2713 Server connectivity successful\" -ForegroundColor Green\n    Write-Host \"Connected clients: $($Response.clients.Count)\" -ForegroundColor Yellow\n} catch {\n    Write-Host \"\u2717 Server connectivity failed: $($_.Exception.Message)\" -ForegroundColor Red\n}\n</code></pre>"},{"location":"installation/client/windows-portable.html#advanced-deployment-options","title":"Advanced Deployment Options","text":""},{"location":"installation/client/windows-portable.html#batch-deployment-script","title":"Batch Deployment Script","text":"<p>Create a batch deployment script for multiple machines:</p> <pre><code># batch-deploy.ps1\nparam(\n    [Parameter(Mandatory=$true)]\n    [string[]]$ComputerNames,\n\n    [Parameter(Mandatory=$true)]\n    [string]$SourcePath,\n\n    [Parameter(Mandatory=$false)]\n    [string]$TargetPath = \"C:\\Program Files\\Intrudex\\Client\",\n\n    [Parameter(Mandatory=$false)]\n    [PSCredential]$Credential\n)\n\nforeach ($Computer in $ComputerNames) {\n    Write-Host \"Deploying to $Computer...\" -ForegroundColor Yellow\n\n    try {\n        # Create remote session\n        $Session = New-PSSession -ComputerName $Computer -Credential $Credential\n\n        # Copy files\n        Copy-Item -Path $SourcePath -Destination $TargetPath -ToSession $Session -Recurse -Force\n\n        # Execute remote installation\n        Invoke-Command -Session $Session -ScriptBlock {\n            param($Path)\n\n            # Register service\n            $ServiceName = \"IntrudexClient\"\n            $ExecutablePath = Join-Path $Path \"intrudex-client.exe\"\n\n            New-Service -Name $ServiceName `\n                       -DisplayName \"Intrudex Security Monitoring Client\" `\n                       -BinaryPathName \"`\"$ExecutablePath`\" --background\" `\n                       -StartupType Automatic\n\n            Start-Service -Name $ServiceName\n\n        } -ArgumentList $TargetPath\n\n        # Close session\n        Remove-PSSession $Session\n\n        Write-Host \"\u2713 Successfully deployed to $Computer\" -ForegroundColor Green\n\n    } catch {\n        Write-Host \"\u2717 Failed to deploy to $Computer`: $($_.Exception.Message)\" -ForegroundColor Red\n    }\n}\n</code></pre>"},{"location":"installation/client/windows-portable.html#group-policy-deployment","title":"Group Policy Deployment","text":"<p>Create Group Policy deployment package:</p> <pre><code># Create Group Policy deployment structure\n$GPOPath = \"C:\\GPO-Intrudex-Client\"\nNew-Item -ItemType Directory -Path $GPOPath -Force\n\n# Create deployment script\n$DeployScript = @\"\n@echo off\nREM Intrudex Client Group Policy Deployment Script\n\nset TARGET_DIR=%ProgramFiles%\\Intrudex\\Client\nset SOURCE_DIR=%~dp0Files\n\nREM Create target directory\nif not exist \"%TARGET_DIR%\" mkdir \"%TARGET_DIR%\"\n\nREM Copy files\nxcopy \"%SOURCE_DIR%\\*\" \"%TARGET_DIR%\\\" /E /H /C /I /Y\n\nREM Register service\nsc create \"IntrudexClient\" binPath= \"\\\"%TARGET_DIR%\\intrudex-client.exe\\\" --background\" start= auto\nsc description \"IntrudexClient\" \"Intrudex Enterprise Security Monitoring Client\"\nsc start \"IntrudexClient\"\n\nREM Log deployment\necho %DATE% %TIME% - Intrudex Client deployed successfully &gt;&gt; \"%WINDIR%\\Temp\\intrudex-deploy.log\"\n\"@\n\n$DeployScript | Out-File -FilePath \"$GPOPath\\deploy.bat\" -Encoding ASCII\n\nWrite-Host \"Group Policy deployment package created at: $GPOPath\" -ForegroundColor Green\n</code></pre>"},{"location":"installation/client/windows-portable.html#network-share-deployment","title":"Network Share Deployment","text":""},{"location":"installation/client/windows-portable.html#unc-path-configuration","title":"UNC Path Configuration","text":"<p>Configure for network share deployment:</p> <pre><code># Network share deployment configuration\n$NetworkPath = \"\\\\file-server\\intrudex-client\"\n$LocalPath = \"C:\\Program Files\\Intrudex\\Client\"\n\n# Create symbolic link for network deployment\nNew-Item -ItemType SymbolicLink -Path $LocalPath -Value $NetworkPath\n\n# Configure service for network path\n$ServiceConfig = @\"\n[Service]\nType=simple\nExecStart=\"$NetworkPath\\intrudex-client.exe\" --background --config \"$NetworkPath\\config\\client_config.json\"\nWorkingDirectory=$NetworkPath\nUser=NetworkService\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n\"@\n\n# Alternative: Create batch script for network execution\n$NetworkBatch = @\"\n@echo off\npushd \"$NetworkPath\"\nintrudex-client.exe --background --config \"config\\client_config.json\"\npopd\n\"@\n\n$NetworkBatch | Out-File -FilePath \"$LocalPath\\start-network.bat\" -Encoding ASCII\n</code></pre>"},{"location":"installation/client/windows-portable.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/client/windows-portable.html#common-deployment-issues","title":"Common Deployment Issues","text":"<p>Service Registration Failed</p> <p>Symptom: Service fails to register or start</p> <p>Resolution: <pre><code># Check service account permissions\nwhoami /priv\n\n# Verify executable permissions\nicacls \"$TargetDirectory\\intrudex-client.exe\"\n\n# Test executable directly\n&amp; \"$TargetDirectory\\intrudex-client.exe\" --foreground --verbose\n\n# Check Windows Event Logs\nGet-WinEvent -LogName System | Where-Object {$_.Id -eq 7034 -or $_.Id -eq 7031}\n</code></pre></p> <p>Configuration File Not Found</p> <p>Symptom: Client cannot locate configuration file</p> <p>Resolution: <pre><code># Verify configuration file exists\nTest-Path \"$TargetDirectory\\config\\client_config.json\"\n\n# Check file permissions\nicacls \"$TargetDirectory\\config\\client_config.json\"\n\n# Validate JSON syntax\ntry {\n    Get-Content \"$TargetDirectory\\config\\client_config.json\" | ConvertFrom-Json\n    Write-Host \"Configuration valid\" -ForegroundColor Green\n} catch {\n    Write-Host \"Configuration invalid: $($_.Exception.Message)\" -ForegroundColor Red\n}\n</code></pre></p> <p>Server Connection Issues</p> <p>Symptom: Cannot connect to Intrudex Server</p> <p>Resolution: <pre><code># Test network connectivity\nTest-NetConnection -ComputerName \"your-server.domain.com\" -Port 80\n\n# Test HTTPS connectivity\ntry {\n    $Response = Invoke-WebRequest -Uri \"https://your-server.domain.com/api/health\" -UseBasicParsing\n    Write-Host \"Server reachable: $($Response.StatusCode)\" -ForegroundColor Green\n} catch {\n    Write-Host \"Server unreachable: $($_.Exception.Message)\" -ForegroundColor Red\n}\n\n# Check DNS resolution\nResolve-DnsName \"your-server.domain.com\"\n</code></pre></p>"},{"location":"installation/client/windows-portable.html#uninstallation","title":"Uninstallation","text":""},{"location":"installation/client/windows-portable.html#-complete-uninstallation-script-stop-service--name-intrudexclient--force-remove-service--name-intrudexclient--remove-files-remove-item-targetdirectory--recurse--force--remove-registry-entries-remove-item-hklmsoftwareintrudex--recurse--force--remove-windows-event-log-entries-optional-wevtutil-el--where-object-_--like-intrudex--foreach-object-wevtutil-cl-_-write-host-intrudex-client-completely-uninstalled--foregroundcolor-green","title":"<pre><code># Complete uninstallation script\nStop-Service -Name \"IntrudexClient\" -Force\nRemove-Service -Name \"IntrudexClient\"\n\n# Remove files\nRemove-Item $TargetDirectory -Recurse -Force\n\n# Remove registry entries\nRemove-Item \"HKLM:\\SOFTWARE\\Intrudex\" -Recurse -Force\n\n# Remove Windows Event Log entries (optional)\nwevtutil el | Where-Object {$_ -like \"*Intrudex*\"} | ForEach-Object {wevtutil cl $_}\n\nWrite-Host \"Intrudex Client completely uninstalled\" -ForegroundColor Green\n</code></pre>","text":""},{"location":"installation/client/windows-source.html","title":"Source Compilation","text":"<p>This guide provides comprehensive instructions for compiling the Intrudex Client from source code, enabling organizations to perform security audits, implement custom modifications, and maintain complete control over their security monitoring infrastructure.</p>"},{"location":"installation/client/windows-source.html#source-compilation-overview","title":"Source Compilation Overview","text":"<p>Source Compilation Benefits</p> <p>Building from source provides complete transparency, enables security auditing, allows custom modifications, and ensures compliance with organizational security policies that require source code review.</p>"},{"location":"installation/client/windows-source.html#compilation-benefits","title":"Compilation Benefits","text":"<ul> <li>Complete Source Transparency: Full access to all source code</li> <li>Security Auditing: Comprehensive code review capabilities</li> <li>Custom Modifications: Implement organization-specific features</li> <li>Compliance Requirements: Meet regulatory source code requirements</li> <li>Build Reproducibility: Consistent, verifiable builds</li> <li>Advanced Debugging: Full debugging symbol support</li> </ul> <pre><code>flowchart TB\n        A[Source Code Acquisition]\n        B[Development Environment Setup]\n        C[Dependency Management]\n        D[Code Review &amp; Audit]\n        E[Custom Modifications]\n        F[Build Configuration]\n        G[Compilation Process]\n        H[Testing &amp; Validation]\n        I[Deployment Package]\n\n        A --&gt; B\n        B --&gt; C\n        C --&gt; D\n        D --&gt; E\n        E --&gt; F\n        F --&gt; G\n        G --&gt; H\n        H --&gt; I\n\n        style A fill:#3498db,color:#fff\n        style D fill:#e74c3c,color:#fff\n        style G fill:#27ae60,color:#fff\n        style I fill:#9b59b6,color:#fff</code></pre>"},{"location":"installation/client/windows-source.html#development-environment-requirements","title":"Development Environment Requirements","text":""},{"location":"installation/client/windows-source.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/client/windows-source.html#minimum-development-specifications","title":"Minimum Development Specifications","text":"<ul> <li>Operating System: Windows 10 (Build 1909+) / Windows Server 2019+</li> <li>Memory: 8 GB RAM minimum (16+ GB recommended for large builds)</li> <li>Storage: 20 GB available space for development environment</li> <li>Network: High-speed internet for dependency downloads</li> </ul>"},{"location":"installation/client/windows-source.html#required-development-tools","title":"Required Development Tools","text":"<ul> <li>Visual Studio 2022: Community, Professional, or Enterprise edition</li> <li>Windows 10/11 SDK: Latest version (22H2 or later)</li> <li>Git: Version 2.30 or later</li> <li>CMake: Version 3.20 or later</li> <li>vcpkg: Microsoft's C++ package manager</li> </ul>"},{"location":"installation/client/windows-source.html#development-tool-installation","title":"Development Tool Installation","text":"<pre><code># Install Chocolatey (if not already installed)\nSet-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n\n# Install development tools via Chocolatey\nchoco install visualstudio2022community -y\nchoco install windows-sdk-10-version-2004-all -y\nchoco install git -y\nchoco install cmake -y\nchoco install vcpkg -y\n\n# Verify installations\ngit --version\ncmake --version\n</code></pre>"},{"location":"installation/client/windows-source.html#visual-studio-configuration","title":"Visual Studio Configuration","text":"<p>Configure Visual Studio for C++ development:</p> <pre><code># Install required Visual Studio workloads\n$VSInstaller = \"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vs_installer.exe\"\n\n&amp; $VSInstaller modify --installPath \"${env:ProgramFiles}\\Microsoft Visual Studio\\2022\\Community\" `\n    --add Microsoft.VisualStudio.Workload.NativeDesktop `\n    --add Microsoft.VisualStudio.Workload.MSBuildTools `\n    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `\n    --add Microsoft.VisualStudio.Component.VC.CMake.Project `\n    --add Microsoft.VisualStudio.Component.VC.ATL `\n    --add Microsoft.VisualStudio.Component.VC.ATLMFC `\n    --add Microsoft.VisualStudio.Component.Windows10SDK.19041 `\n    --quiet --wait\n</code></pre>"},{"location":"installation/client/windows-source.html#source-code-acquisition","title":"Source Code Acquisition","text":""},{"location":"installation/client/windows-source.html#repository-cloning","title":"Repository Cloning","text":"<p>Clone the Intrudex repository and navigate to the client source:</p> <pre><code># Clone the main repository\ngit clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex\n\n# Navigate to client source directory\ncd Intrudex-Client\n\n# Verify source structure\nls -la\n</code></pre>"},{"location":"installation/client/windows-source.html#source-code-structure","title":"Source Code Structure","text":"<p>Understanding the client source code organization:</p> <pre><code>Intrudex-Client/\n\u251c\u2500\u2500 assets/                       # External binaries/tools (Sysmon, utilities)\n\u2502   \u251c\u2500\u2500 IntrudexSigma.mc          # Sigma rule file for detection\n\u2502   \u251c\u2500\u2500 mc.exe                    # Memory capture/analysis tool\n\u2502   \u251c\u2500\u2500 snoretoast.exe            # Windows notification utility\n\u2502   \u251c\u2500\u2500 Sysmon64a.exe             # Sysmon (64-bit, alternate version)\n\u2502   \u251c\u2500\u2500 Sysmon64.exe              # Sysmon (64-bit, primary)\n\u2502   \u2514\u2500\u2500 Sysmon.exe                # Sysmon (32-bit)\n\u2502\n\u251c\u2500\u2500 CMakeLists.txt                # CMake build configuration\n\u2502\n\u251c\u2500\u2500 config/                       # Configuration files\n\u2502   \u251c\u2500\u2500 client_config.json        # Client-specific settings (API endpoints, etc.)\n\u2502   \u251c\u2500\u2500 sigma_config.json         # Sigma rule definitions for detection\n\u2502   \u2514\u2500\u2500 sysmonconfig-export.xml   # Sysmon configuration (event filtering)\n\u2502\n\u251c\u2500\u2500 header/                       # C++ header files (.h)\n\u2502   \u251c\u2500\u2500 ApplicationHttpSender.h   # HTTP sender for application logs\n\u2502   \u251c\u2500\u2500 ApplicationLogCollector.h # Application event collector\n\u2502   \u251c\u2500\u2500 HttpClient.h              # Base HTTP client logic\n\u2502   \u251c\u2500\u2500 SecurityHttpSender.h      # HTTP sender for security logs\n\u2502   \u251c\u2500\u2500 SecurityLogCollector.h    # Security event collector (e.g., Sysmon)\n\u2502   \u251c\u2500\u2500 SigmaEventLogInstaller.h  # Sigma rule installer (Windows Event Log)\n\u2502   \u251c\u2500\u2500 SigmaLogCollector.h       # Sigma rule-based log collector\n\u2502   \u251c\u2500\u2500 SigmaManager.h            # Sigma rule management/processing\n\u2502   \u251c\u2500\u2500 SysmonCollector.h         # Sysmon log collector\n\u2502   \u251c\u2500\u2500 sysmon_manager.h          # Sysmon service control (start/stop)\n\u2502   \u251c\u2500\u2500 SystemHttpSender.h        # HTTP sender for system logs\n\u2502   \u251c\u2500\u2500 SystemLogCollector.h      # System event collector\n\u2502   \u2514\u2500\u2500 utils.h                   # Utility functions (logging, parsing)\n\u2502\n\u251c\u2500\u2500 includes/                     # Third-party library headers\n\u2502   \u251c\u2500\u2500 cxxopts.hpp               # CLI argument parser\n\u2502   \u251c\u2500\u2500 json.hpp                  # JSON parsing (nlohmann/json)\n\u2502   \u251c\u2500\u2500 pugiconfig.hpp            # XML parser config (pugixml)\n\u2502   \u251c\u2500\u2500 pugixml.cpp               # XML parser implementation\n\u2502   \u2514\u2500\u2500 pugixml.hpp               # XML parser header\n\u2502\n\u251c\u2500\u2500 src/                          # Main application source code (.cpp)\n\u2502   \u251c\u2500\u2500 ApplicationHttpSender.cpp   # Impl. for application log HTTP sending\n\u2502   \u251c\u2500\u2500 ApplicationLogCollector.cpp # Impl. for application event collection\n\u2502   \u251c\u2500\u2500 HttpClient.cpp             # Base HTTP client logic\n\u2502   \u251c\u2500\u2500 main.cpp                   # Entry point\n\u2502   \u251c\u2500\u2500 SecurityHttpSender.cpp      # Impl. for security log HTTP sending\n\u2502   \u251c\u2500\u2500 SecurityLogCollector.cpp    # Impl. for security event collection\n\u2502   \u251c\u2500\u2500 SigmaEventLogInstaller.cpp  # Sigma rule installer logic\n\u2502   \u251c\u2500\u2500 SigmaLogCollector.cpp       # Sigma rule-based log collection\n\u2502   \u251c\u2500\u2500 SigmaManager.cpp            # Sigma rule management\n\u2502   \u251c\u2500\u2500 SysmonCollector.cpp         # Sysmon log collection logic\n\u2502   \u251c\u2500\u2500 sysmon_manager.cpp          # Sysmon service control\n\u2502   \u251c\u2500\u2500 SystemHttpSender.cpp        # Impl. for system log HTTP sending\n\u2502   \u251c\u2500\u2500 SystemLogCollector.cpp      # Impl. for system event collection\n\u2502   \u2514\u2500\u2500 utils.cpp                   # Utility functions\n\u2502\n\u2514\u2500\u2500 version.rc                    # Windows version resource (metadata)\n</code></pre>"},{"location":"installation/client/windows-source.html#enterprise-build-procedures","title":"Enterprise Build Procedures","text":"<p>For organizations requiring comprehensive source code auditing and custom enterprise modifications:</p> <p>Enterprise Prerequisites: - Microsoft Visual Studio 2019/2022 or Build Tools for Visual Studio - CMake 3.15 or later - Git Version Control System - Windows Software Development Kit (SDK)</p> <p>Enterprise Build Steps:</p> <ol> <li> <p>Navigate to the client development directory: <pre><code>cd Intrudex-Client\n</code></pre></p> </li> <li> <p>Configure the enterprise build environment: <pre><code>mkdir build-files\n</code></pre></p> </li> <li> <p>Compile the enterprise project: <pre><code>cmake --build build-files --target Intrudex_Client -j 3\n</code></pre></p> </li> </ol> <p>Alternative Enterprise Build Method: Utilize the automated enterprise build script: <pre><code>python builder/Client/Intrudex-Client-Builder.py\n</code></pre></p> <p></p>"},{"location":"installation/client/windows-source.html#code-security-review","title":"Code Security Review","text":""},{"location":"installation/client/windows-source.html#static-analysis","title":"Static Analysis","text":"<p>Perform static code analysis:</p> <pre><code># Install PVS-Studio (commercial static analyzer)\nchoco install pvs-studio -y\n\n# Run PVS-Studio analysis\n$PVSStudio = \"${env:ProgramFiles(x86)}\\PVS-Studio\\PVS-Studio_Cmd.exe\"\n&amp; $PVSStudio --target \"build\\IntrudexClient.sln\" --configuration Release --platform x64 --output \"analysis-report.plog\"\n\n# Generate HTML report\n$PlogConverter = \"${env:ProgramFiles(x86)}\\PVS-Studio\\PlogConverter.exe\"\n&amp; $PlogConverter \"analysis-report.plog\" --renderTypes html --output \"analysis-report.html\"\n</code></pre>"},{"location":"installation/client/windows-source.html#security-vulnerability-scanning","title":"Security Vulnerability Scanning","text":"<p>Scan for known vulnerabilities:</p> <pre><code># Install dependency check tool\nInvoke-WebRequest -Uri \"https://github.com/jeremylong/DependencyCheck/releases/download/v7.4.4/dependency-check-7.4.4-release.zip\" -OutFile \"dependency-check.zip\"\nExpand-Archive -Path \"dependency-check.zip\" -DestinationPath \"tools\"\n\n# Run dependency vulnerability scan\n.\\tools\\dependency-check\\bin\\dependency-check.bat --project \"IntrudexClient\" --scan \"build\" --format ALL --out \"security-report\"\n\n# Review security report\nStart-Process \"security-report\\dependency-check-report.html\"\n</code></pre>"},{"location":"installation/server/index.html","title":"Intrudex Server Installation Guide","text":"<p>The Intrudex Server functions as the central enterprise command and control hub, providing a robust Python Flask-based REST API architecture, sophisticated administrative dashboard interface, and comprehensive centralized alert management system.</p>"},{"location":"installation/server/index.html#server-architecture-overview","title":"Server Architecture Overview","text":"<p>Enterprise Server Architecture</p> <p>The Intrudex Server supports enterprise deployment across Windows, macOS, Linux, and containerized cloud environments with full high-availability support and scalable architecture.</p>"},{"location":"installation/server/index.html#enterprise-technology-stack-architecture","title":"Enterprise Technology Stack Architecture","text":"<pre><code>flowchart TD\n    %% Frontend Layer\n    subgraph Frontend[\"Frontend Presentation Layer\"]\n        UI[&lt;b&gt;Admin Web Dashboard&lt;/b&gt;]\n        API[&lt;b&gt;REST API Gateway&lt;/b&gt;]\n    end\n\n    %% Application Logic Layer\n    subgraph Logic[\"Application Business Logic Layer\"]\n        FLASK[&lt;b&gt;Flask Core&lt;/b&gt;]\n        AUTH[Authentication&lt;br&gt;&amp; Authorization]\n        ALERTS[Alert Management&lt;br&gt;Engine]\n    end\n\n    %% Data Layer\n    subgraph Data[\"Data Persistence Layer\"]\n        SQLITE[(SQLite&lt;br&gt;&lt;i&gt;Development&lt;/i&gt;)]\n        POSTGRES[(PostgreSQL&lt;br&gt;&lt;i&gt;Production&lt;/i&gt;)]\n        CACHE[(Redis&lt;br&gt;Caching)]\n    end\n\n    %% Infrastructure Layer\n    subgraph Infra[\"Infrastructure &amp; Security Layer\"]\n        DOCKER[Docker&lt;br&gt;Containerization]\n        NGINX[Nginx&lt;br&gt;Reverse Proxy]\n        SSL[TLS/SSL&lt;br&gt;Security]\n    end\n\n    %% Connections\n    UI -- \"User Actions\" --&gt; FLASK\n    API -- \"Client Requests\" --&gt; FLASK\n    FLASK -- \"Business Logic\" --&gt; AUTH\n    FLASK -- \"Alert Ops\" --&gt; ALERTS\n    ALERTS -- \"Store Alerts\" --&gt; SQLITE\n    ALERTS -- \"Store Alerts\" --&gt; POSTGRES\n    FLASK -- \"Cache Ops\" --&gt; CACHE\n\n    %% Infra Connections\n    FLASK -.-&gt; DOCKER\n    FLASK -.-&gt; NGINX\n    NGINX -.-&gt; SSL\n\n    %% Styles\n    style UI fill:#3498db,color:#fff\n    style API fill:#2980b9,color:#fff\n    style FLASK fill:#2d4a87,color:#fff\n    style AUTH fill:#6c3483,color:#fff\n    style ALERTS fill:#af601a,color:#fff\n    style SQLITE fill:#b2babb\n    style POSTGRES fill:#336791,color:#fff\n    style CACHE fill:#27ae60,color:#fff\n    style DOCKER fill:#0db7ed,color:#fff\n    style NGINX fill:#229954,color:#fff\n    style SSL fill:#f1c40f</code></pre>"},{"location":"installation/server/index.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/server/index.html#minimum-technical-specifications","title":"Minimum Technical Specifications","text":"<ul> <li>Operating System: Windows 10+, macOS 10.15+, Ubuntu 18.04 LTS+, or compatible Linux distribution</li> <li>Python Runtime: Version 3.8+ (Python 3.10+ recommended for optimal performance)</li> <li>Memory Allocation: 2 GB RAM minimum (4+ GB recommended for production)</li> <li>Storage Requirements: 10 GB available space (database growth dependent)</li> <li>Network Infrastructure: Inbound HTTPS connectivity for client communications</li> </ul>"},{"location":"installation/server/index.html#enterprise-production-recommendations","title":"Enterprise Production Recommendations","text":"<ul> <li>Processing Power: Multi-core processor architecture (4+ cores recommended)</li> <li>Memory Configuration: 8 GB RAM minimum for high-volume environments</li> <li>Storage Infrastructure: SSD with 50+ GB available space</li> <li>Database Backend: PostgreSQL for enterprise production deployments</li> <li>High Availability: Load balancer configuration for enterprise requirements</li> </ul>"},{"location":"installation/server/index.html#deployment-options","title":"Deployment Options","text":"<p>Choose your deployment strategy based on your environment and requirements:</p> <pre><code>flowchart TB\n    %% Main Node\n    A([&lt;b style=\"font-size:1.8em;\"&gt;Server Deployment Options&lt;/b&gt;])\n\n    %% Deployment Options\n    B([&lt;b style=\"font-size:1.17em;\"&gt;Development&lt;br&gt;Environment&lt;/b&gt;])\n    C([&lt;b style=\"font-size:1.17em;\"&gt;Production&lt;br&gt;Environment&lt;/b&gt;])\n    D([&lt;b style=\"font-size:1.17em;\"&gt;Docker&lt;br&gt;Development&lt;/b&gt;])\n    E([&lt;b style=\"font-size:1.17em;\"&gt;Docker&lt;br&gt;Production&lt;/b&gt;])\n\n    %% Details for Development\n    B1([SQLite&lt;br&gt;&lt;i&gt;Database&lt;/i&gt;])\n    B2([Dev Server&lt;br&gt;&lt;i&gt;Debug Mode&lt;/i&gt;])\n    B3([Quick&lt;br&gt;Setup])\n\n    %% Details for Production\n    C1([PostgreSQL&lt;br&gt;&lt;i&gt;Database&lt;/i&gt;])\n    C2([Prod&lt;br&gt;Optimizations])\n    C3([Security&lt;br&gt;Hardening])\n\n    %% Details for Docker Dev\n    D1([Docker Compose])\n    D2([Dev&lt;br&gt;Containers])\n    D3([Volume&lt;br&gt;Mapping])\n\n    %% Details for Docker Prod\n    E1([Prod&lt;br&gt;Containers])\n    E2([Orchestration&lt;br&gt;Ready])\n    E3([Scalable&lt;br&gt;Arch.])\n\n    %% Connections\n    A --&gt; B\n    A --&gt; C\n    A --&gt; D\n    A --&gt; E\n\n    B --&gt; B1\n    B --&gt; B2\n    B --&gt; B3\n\n    C --&gt; C1\n    C --&gt; C2\n    C --&gt; C3\n\n    D --&gt; D1\n    D --&gt; D2\n    D --&gt; D3\n\n    E --&gt; E1\n    E --&gt; E2\n    E --&gt; E3\n\n    %% Styling\n    style A fill:#222f3e,color:#fff,stroke:#222f3e,stroke-width:4px\n    style B fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:3px\n    style C fill:#27ae60,color:#fff,stroke:#229954,stroke-width:3px\n    style D fill:#f39c12,color:#fff,stroke:#e67e22,stroke-width:3px\n    style E fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:3px\n\n    style B1 fill:#d6eaf8,color:#222\n    style B2 fill:#d6eaf8,color:#222\n    style B3 fill:#d6eaf8,color:#222\n\n    style C1 fill:#d5f5e3,color:#222\n    style C2 fill:#d5f5e3,color:#222\n    style C3 fill:#d5f5e3,color:#222\n\n    style D1 fill:#f9e79f,color:#222\n    style D2 fill:#f9e79f,color:#222\n    style D3 fill:#f9e79f,color:#222\n\n    style E1 fill:#f5b7b1,color:#222\n    style E2 fill:#f5b7b1,color:#222\n    style E3 fill:#f5b7b1,color:#222\n\n    %% Layout tweaks for better spacing\n    linkStyle default stroke-width:2px\n    classDef bigNode font-size:30px;\n    class A,B,C,D,E bigNode;</code></pre>"},{"location":"installation/server/index.html#deployment-comparison","title":"Deployment Comparison","text":"Feature Development Production Docker Dev Docker Prod Setup Speed \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 Production Ready \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Scalability \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Security \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Maintenance \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50"},{"location":"installation/server/index.html#installation-methods","title":"Installation Methods","text":"<ul> <li> <p> Development Environment</p> <p>Perfect for Testing &amp; Development</p> <p>Quick setup with SQLite database for development and testing</p> <ul> <li>SQLite database (no external dependencies)</li> <li>Development server with debug mode</li> <li>Rapid deployment (15 minutes)</li> <li>Local testing environment</li> </ul> <p>Setup Development Environment \u2192</p> </li> <li> <p> Production Environment</p> <p>Enterprise Production Deployment</p> <p>Full production setup with PostgreSQL and security hardening</p> <ul> <li>PostgreSQL database backend</li> <li>Production optimizations</li> <li>Security hardening configurations</li> <li>System service integration</li> </ul> <p>Setup Production Environment \u2192</p> </li> <li> <p> Docker Development</p> <p>Containerized Development</p> <p>Consistent development environment using Docker containers</p> <ul> <li>Docker Compose orchestration</li> <li>Development container setup</li> <li>Volume mapping for development</li> <li>Easy environment cleanup</li> </ul> <p>Setup Docker Development \u2192</p> </li> <li> <p> Docker Production</p> <p>Enterprise Container Deployment</p> <p>Production-ready containerized deployment with orchestration</p> <ul> <li>Production container optimization</li> <li>Security-hardened containers</li> <li>Kubernetes/Swarm ready</li> <li>Scalable microservice architecture</li> </ul> <p>Setup Docker Production \u2192</p> </li> </ul>"},{"location":"installation/server/index.html#prerequisites","title":"Prerequisites","text":""},{"location":"installation/server/index.html#common-prerequisites","title":"Common Prerequisites","text":"<p>Before installation, ensure these components are available:</p>"},{"location":"installation/server/index.html#python-environment","title":"Python Environment","text":"<ul> <li>Python 3.10+ (3.12+ recommended)</li> <li>pip package manager</li> <li>virtualenv for environment isolation</li> </ul>"},{"location":"installation/server/index.html#nodejs-environment","title":"Node.js Environment","text":"<ul> <li>Node.js 16+ for frontend asset compilation</li> <li>npm package manager</li> </ul>"},{"location":"installation/server/index.html#network-requirements","title":"Network Requirements","text":"<ul> <li>Inbound connectivity on configured port (default: 80)</li> <li>Outbound connectivity for package downloads</li> <li>DNS resolution for domain names</li> </ul>"},{"location":"installation/server/index.html#environment-specific-prerequisites","title":"Environment-Specific Prerequisites","text":"DevelopmentProductionDocker <ul> <li>Git for source code management</li> <li>Text editor or IDE</li> <li>Local development tools</li> </ul> <ul> <li>Production database (PostgreSQL recommended)</li> <li>Reverse proxy (Nginx/Apache)</li> <li>TLS certificates</li> <li>System service management</li> </ul> <ul> <li>Docker Engine 20.10+</li> <li>Docker Compose 2.0+</li> <li>Container orchestration (optional)</li> </ul>"},{"location":"installation/server/index.html#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"installation/server/index.html#5-minute-development-setup","title":"5-Minute Development Setup","text":"macOS / LinuxWindows <pre><code># Clone repository\ngit clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex/Intrudex-Server\n\n# Setup Python environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\nnpm install &amp;&amp; npm run build\n\n# Configure environment\ncp .env.example .env\n\n# Initialize database\nflask db init\nflask db migrate -m \"Initial migration\"\nflask db upgrade\nflask create-admin\n\n# Start server\nflask run\n</code></pre> <pre><code># Clone repository\ngit clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex/Intrudex-Server\n\n# Setup Python environment\npython -m venv venv\n.\\venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\nnpm install\nnpm run build\n\n# Configure environment\ncopy .env.example .env\n\n# Initialize database\nflask db init\nflask db migrate -m \"Initial migration\"\nflask db upgrade\nflask create-admin\n\n# Start server\nflask run\n</code></pre> <p>Access the dashboard at: <code>http://localhost:80</code></p>"},{"location":"installation/server/index.html#configuration-overview","title":"Configuration Overview","text":"<p>Key configuration parameters:</p>"},{"location":"installation/server/index.html#example-env-configuration","title":"Example <code>.env</code> Configuration","text":"RequiredAPI KeysAPI Enable/DisableSecurity Headers <pre><code>##################### Required Settings #####################\nFLASK_RUN_PORT=80\nFLASK_RUN_HOST=0.0.0.0\nFLASK_DEBUG=0  # Production: 0, Development: 1\n\nSECRET_KEY=your-cryptographically-secure-secret-key\n\nDATABASE_URL=sqlite:///intrudex.sqlite3  # Development\n# DATABASE_URL=postgresql://user:pass@host/db  # Production\n\nSQLALCHEMY_TRACK_MODIFICATIONS=False\n\nMode=development  # or production\n</code></pre> <pre><code>##################### API Keys for different services #####################\nSYSMON_API_KEY=&lt;YOUR-API-KEY&gt;\nAPPLICATION_API_KEY=&lt;YOUR-API-KEY&gt;\nSECURITY_API_KEY=&lt;YOUR-API-KEY&gt;\nSYSTEM_API_KEY=&lt;YOUR-API-KEY&gt;\n</code></pre> <pre><code>##################### Enable or disable APIs #####################\nSYSMON_API_ENABLED=1\nAPPLICATION_API_ENABLED=1\nSECURITY_API_ENABLED=1\nSYSTEM_API_ENABLED=1\n</code></pre> <pre><code>##################### Additional Security Headers #####################\nALLOWED_CLIENT_IDS=&lt;ALLOWED-CLIENTS-LIST&gt;\nREQUIRED_HEADERS=&lt;REQUIRED-HEADERS&gt;\n</code></pre>"},{"location":"installation/server/index.html#database-options","title":"Database Options","text":"SQLite (Development)PostgreSQL (Production) <p><pre><code>DATABASE_URL=sqlite:///intrudex.sqlite3\n</code></pre> - No external dependencies - Perfect for development - Single file database</p> <p><pre><code>DATABASE_URL=postgresql://username:password@localhost/intrudex\n</code></pre> - Enterprise-grade reliability - Better performance at scale - Advanced features support</p>"},{"location":"installation/server/index.html#security-considerations","title":"Security Considerations","text":""},{"location":"installation/server/index.html#development-security","title":"Development Security","text":"<ul> <li>Use development certificates</li> <li>Enable debug mode for troubleshooting</li> <li>Local network access only</li> </ul>"},{"location":"installation/server/index.html#production-security","title":"Production Security","text":"<ul> <li>Use trusted TLS certificates</li> <li>Disable debug mode</li> <li>Implement proper authentication</li> <li>Configure firewall rules</li> <li>Regular security updates</li> </ul>"},{"location":"installation/server/development.html","title":"Development Environment Setup","text":"<p>This guide provides step-by-step instructions for setting up a development environment of the Intrudex Server. This configuration is ideal for development, testing, and proof-of-concept deployments.</p>"},{"location":"installation/server/development.html#development-environment-overview","title":"Development Environment Overview","text":"<p>Development Configuration</p> <p>The development environment uses SQLite database for simplicity, enables debug mode for detailed logging, and runs on the Flask development server for quick iteration and testing.</p>"},{"location":"installation/server/development.html#development-features","title":"Development Features","text":"<ul> <li>SQLite Database: No external database dependencies</li> <li>Debug Mode: Detailed error messages and auto-reload</li> <li>Hot Reload: Automatic server restart on code changes  </li> <li>Development Server: Built-in Flask development server</li> <li>Quick Setup: Minimal configuration required</li> </ul>"},{"location":"installation/server/development.html#prerequisites","title":"Prerequisites","text":""},{"location":"installation/server/development.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/server/development.html#minimum-specifications","title":"Minimum Specifications","text":"<ul> <li>Operating System: Windows 10+, macOS 10.15+, Ubuntu 18.04+</li> <li>Python: Version 3.8+ (3.10+ recommended)</li> <li>Memory: 1 GB RAM minimum (2+ GB recommended)</li> <li>Storage: 5 GB available space</li> <li>Network: Port 80 available (configurable)</li> </ul>"},{"location":"installation/server/development.html#required-software","title":"Required Software","text":"<p>Before beginning, ensure these components are installed:</p> WindowsmacOSUbuntu/Debian <pre><code># Download Python from python.org\npython --version\npip --version\n\n# Install Node.js from nodejs.org or via Chocolatey\nchoco install nodejs\nnode --version\nnpm --version\n\n# Install Git\nchoco install git\ngit --version\n</code></pre> <pre><code># Install via Homebrew (recommended)\nbrew install python@3.13 node git\n\n# Verify installations\npython3 --version\npip3 --version\nnode --version\nnpm --version\ngit --version\n</code></pre> <pre><code># Update package repository\nsudo apt update\n\n# Install required packages\nsudo apt install python3 python3-pip python3-venv nodejs npm git\n\n# Verify installations\npython3 --version\npip3 --version\nnode --version\nnpm --version\ngit --version\n</code></pre>"},{"location":"installation/server/development.html#installation-process","title":"Installation Process","text":""},{"location":"installation/server/development.html#step-1-repository-acquisition","title":"Step 1: Repository Acquisition","text":"<p>Clone the Intrudex repository and navigate to the server directory:</p> <pre><code># Clone the repository\ngit clone https://github.com/ToolsHive/Intrudex.git\n\n# Navigate to server directory\ncd Intrudex/Intrudex-Server\n</code></pre>"},{"location":"installation/server/development.html#step-2-python-environment-setup","title":"Step 2: Python Environment Setup","text":"<p>Create and activate a virtual environment to isolate dependencies:</p> Linux/macOSWindows <pre><code># Create virtual environment\npython3 -m venv intrudex-dev-env\n\n# Activate virtual environment\nsource intrudex-dev-env/bin/activate\n\n# Verify activation\nwhich python\n# Should show: /path/to/intrudex-dev-env/bin/python\n</code></pre> <pre><code># Create virtual environment\npython -m venv intrudex-dev-env\n\n# Activate virtual environment\n./intrudex-dev-env\\Scripts\\activate\n\n# Verify activation\nwhere python\n# Should show: C:\\path\\to\\intrudex-dev-env\\Scripts\\python.exe\n</code></pre>"},{"location":"installation/server/development.html#step-3-python-dependencies-installation","title":"Step 3: Python Dependencies Installation","text":"<p>Install all required Python packages:</p> <pre><code># Ensure virtual environment is activated\npip install --upgrade pip\n\n# Install project dependencies\npip install -r requirements.txt\n\n# Verify key packages\npip show flask flask-migrate flask-sqlalchemy\n</code></pre>"},{"location":"installation/server/development.html#step-4-frontend-dependencies-and-build","title":"Step 4: Frontend Dependencies and Build","text":"<p>Install Node.js dependencies and build frontend assets:</p> <pre><code># Install Node.js dependencies\nnpm install\n\n# Build Tailwind CSS styles for development\nnpm run build\n</code></pre>"},{"location":"installation/server/development.html#step-5-environment-configuration","title":"Step 5: Environment Configuration","text":"<p>Create and configure the development environment file:</p> <pre><code># Create environment configuration file\ntouch .env  # Linux/macOS\n# type nul &gt; .env  # Windows\n</code></pre> <p>Add the following development configuration to <code>.env</code>:</p> RequiredAPI KeysAPI Enable/DisableSecurity Headers <pre><code>##################### Required Settings #####################\nFLASK_RUN_PORT=80\nFLASK_RUN_HOST=0.0.0.0\nFLASK_DEBUG=0  # Production: 0, Development: 1\n\nSECRET_KEY=your-cryptographically-secure-secret-key\n\nDATABASE_URL=sqlite:///intrudex.sqlite3  # Development\n# DATABASE_URL=postgresql://user:pass@host/db  # Production\n\nSQLALCHEMY_TRACK_MODIFICATIONS=False\n\nMode=development  # or production\n</code></pre> <pre><code>##################### API Keys for different services #####################\nSYSMON_API_KEY=&lt;YOUR-API-KEY&gt;\nAPPLICATION_API_KEY=&lt;YOUR-API-KEY&gt;\nSECURITY_API_KEY=&lt;YOUR-API-KEY&gt;\nSYSTEM_API_KEY=&lt;YOUR-API-KEY&gt;\n</code></pre> <pre><code>##################### Enable or disable APIs #####################\nSYSMON_API_ENABLED=1\nAPPLICATION_API_ENABLED=1\nSECURITY_API_ENABLED=1\nSYSTEM_API_ENABLED=1\n</code></pre> <pre><code>##################### Additional Security Headers #####################\nALLOWED_CLIENT_IDS=&lt;ALLOWED-CLIENTS-LIST&gt;\nREQUIRED_HEADERS=&lt;REQUIRED-HEADERS&gt;\n</code></pre>"},{"location":"installation/server/development.html#step-6-database-initialization","title":"Step 6: Database Initialization","text":"<p>Initialize the SQLite database schema using Flask-Migrate:</p> <pre><code># Initialize migration repository (one-time only)\nflask db init\n\n# Generate initial database migration\nflask db migrate -m \"Initial database schema for development\"\n\n# Apply migrations to create database schema\nflask db upgrade\n\n# Verify database creation\nls -la *.sqlite3  # Should show intrudex.sqlite3\n</code></pre>"},{"location":"installation/server/development.html#step-7-administrative-user-creation","title":"Step 7: Administrative User Creation","text":"<p>Create an administrative user for dashboard access:</p> <pre><code># Create admin user interactively\nflask create-admin\n\n# Follow prompts to set:\n# - Admin username\n# - Admin password\n</code></pre> <p>Example output: <pre><code>Admin Username: admin\nAdmin Password: [hidden]\nConfirm Password: [hidden]\nAdmin user created successfully!\n</code></pre></p>"},{"location":"installation/server/development.html#step-8-development-server-launch","title":"Step 8: Development Server Launch","text":"<p>Start the Flask development server:</p> <pre><code># Start development server\nflask run\n\n# Alternative: Use Python directly\n# python run.py\n</code></pre> <p>Expected output: <pre><code> * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:80\n * Restarting with stat\n * Debugger is active!\n</code></pre></p>"},{"location":"installation/server/development.html#verification-and-testing","title":"Verification and Testing","text":""},{"location":"installation/server/development.html#health-check-verification","title":"Health Check Verification","text":"<p>Verify the server is running correctly:</p> <pre><code># Test server health endpoint\ncurl http://localhost:80/\n</code></pre>"},{"location":"installation/server/development.html#dashboard-access","title":"Dashboard Access","text":"<ol> <li>Open your web browser</li> <li>Navigate to: <code>http://localhost:80</code></li> <li>Login with the admin credentials you created</li> <li>Verify dashboard loads correctly</li> </ol>"},{"location":"installation/server/development.html#api-endpoint-testing","title":"API Endpoint Testing","text":"<p>Test key API endpoints:</p> <pre><code># Test authentication endpoint\ncurl -X POST http://localhost:80/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"your-password\"}'\n\n# Test Logs endpoint\ncurl http://localhost:80/api/logs\n</code></pre>"},{"location":"installation/server/development.html#development-workflow","title":"Development Workflow","text":""},{"location":"installation/server/development.html#daily-development-process","title":"Daily Development Process","text":"<pre><code># 1. Activate virtual environment\nsource intrudex-dev-env/bin/activate  # Linux/macOS\n# intrudex-dev-env\\Scripts\\activate   # Windows\n\n# 2. Start development server\nflask run\n\n# 3. Make code changes - server will auto-reload\n\n# 4. Test changes via browser or API calls\n</code></pre>"},{"location":"installation/server/development.html#database-management","title":"Database Management","text":"<pre><code># View current database schema\nflask db current\n\n# Create new migration after model changes\nflask db migrate -m \"Description of changes\"\n\n# Apply migrations\nflask db upgrade\n\n# Rollback migrations (if needed)\nflask db downgrade\n</code></pre>"},{"location":"installation/server/development.html#frontend-development","title":"Frontend Development","text":"<pre><code># Build CSS after changes\nnpm run build\n\n# Development build (unminified)\nnpm run dev\n</code></pre>"},{"location":"installation/server/development.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/server/development.html#common-development-issues","title":"Common Development Issues","text":"<p>Port Already in Use</p> <p>Symptom: <code>Address already in use</code> error</p> <p>Resolution: <pre><code># Find process using port 80\nlsof -i :80  # Linux/macOS\nnetstat -ano | findstr :80  # Windows\n\n# Kill process or change port in .env\nFLASK_RUN_PORT=8080\n</code></pre></p> <p>Module Import Errors</p> <p>Symptom: <code>ModuleNotFoundError</code> when starting server</p> <p>Resolution: <pre><code># Ensure virtual environment is activated\nwhich python  # Should show venv path\n\n# Reinstall dependencies\npip install -r requirements.txt\n</code></pre></p> <p>Database Migration Errors</p> <p>Symptom: Migration fails or database locked</p> <p>Resolution: <pre><code># Remove migration files and database\nrm -rf migrations/\nrm intrudex.sqlite3\n\n# Reinitialize\nflask db init\nflask db migrate -m \"Initial migration\"\nflask db upgrade\n</code></pre></p> <p>Frontend Build Errors</p> <p>Symptom: CSS not loading or npm build fails</p> <p>Resolution: <pre><code># Clear npm cache and reinstall\nrm -rf node_modules/\nrm package-lock.json\nnpm install\nnpm run build\n</code></pre></p>"},{"location":"installation/server/development.html#development-tips","title":"Development Tips","text":"<ol> <li>Auto-reload: The development server automatically restarts when Python files change</li> <li>Debug Mode: Detailed error pages help identify issues quickly  </li> <li>SQLite Browser: Use tools like DB Browser for SQLite to inspect the database</li> <li>API Testing: Use tools like Postman or curl for API endpoint testing</li> <li>Logging: Check console output for detailed debug information</li> </ol>"},{"location":"installation/server/docker-dev.html","title":"Docker Development Environment","text":"<p>This guide provides instructions for setting up the Intrudex Server development environment using Docker containers. This approach ensures consistency across development teams and simplifies dependency management.</p>"},{"location":"installation/server/docker-dev.html#docker-development-overview","title":"Docker Development Overview","text":"<p>Development Features</p> <p>The Docker development environment provides hot reload, debugging capabilities, isolated database, and volume mounting for real-time code changes without rebuilding containers.</p>"},{"location":"installation/server/docker-dev.html#development-stack","title":"Development Stack","text":"<ul> <li>Docker Compose: Multi-container orchestration</li> <li>Hot Reload: Automatic application restart on code changes</li> <li>Debug Support: Remote debugging capabilities</li> <li>Volume Mounting: Real-time code synchronization</li> <li>Database Isolation: Containerized PostgreSQL/SQLite</li> <li>Redis Integration: Caching and session storage</li> </ul> <pre><code>graph TB\n    subgraph \"Development Environment\"\n        subgraph \"Host System\"\n            CODE[Source Code]\n            EDITOR[VS Code/IDE]\n        end\n\n        subgraph \"Docker Containers\"\n            WEB[Flask Web Server]\n            DB[(PostgreSQL)]\n            REDIS[(Redis Cache)]\n            NODE[Node.js Builder]\n        end\n\n        subgraph \"Development Services\"\n            DEBUG[Debug Server]\n            LOGS[Log Aggregation]\n            SYNC[File Sync]\n        end\n    end\n\n    EDITOR --&gt; CODE\n    CODE --&gt; WEB\n    WEB --&gt; DB\n    WEB --&gt; REDIS\n    WEB --&gt; DEBUG\n    NODE --&gt; WEB\n    SYNC --&gt; WEB\n\n    style WEB fill:#3498db\n    style DB fill:#336791\n    style REDIS fill:#dc382d\n    style NODE fill:#68a063</code></pre>"},{"location":"installation/server/docker-dev.html#docker-images","title":"Docker Images","text":""},{"location":"installation/server/docker-dev.html#available-images","title":"Available Images","text":"<p>Choose from the following pre-built images or build from source:</p> Docker Hub (Recommended)GitHub Container RegistryBuild from Source <pre><code># Development image with debugging tools\ndocker pull armoghan/intrudex-server:1.0.0-dev\n\n# Production-optimized image\ndocker pull armoghan/intrudex-server:1.0.0-prod\n</code></pre> <pre><code># Development image\ndocker pull ghcr.io/toolshive/intrudex:1.0.0-dev\n\n# Production image  \ndocker pull ghcr.io/toolshive/intrudex:1.0.0-prod\n\n# Authentication required for private repositories\necho $GITHUB_TOKEN | docker login ghcr.io -u USERNAME --password-stdin\n</code></pre> <pre><code># Build development image locally\ndocker build -f Dockerfile -t intrudex-dev ./Intrudex-Server\n</code></pre>"},{"location":"installation/server/docker-dev.html#prerequisites","title":"Prerequisites","text":""},{"location":"installation/server/docker-dev.html#required-software","title":"Required Software","text":"WindowsmacOSUbuntu/Debian <pre><code># Install Docker Desktop\nwinget install Docker.DockerDesktop\n\n# Install Git\nwinget install Git.Git\n\n# Install VS Code (optional)\nwinget install Microsoft.VisualStudioCode\n\n# Restart after installation\n</code></pre> <pre><code># Install Docker Desktop\nbrew install --cask docker\n\n# Install Git\nbrew install git\n\n# Install VS Code (optional)\nbrew install --cask visual-studio-code\n</code></pre> <pre><code># Update package index\nsudo apt update\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Install Docker Compose\nsudo apt install docker-compose-plugin\n\n# Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Install Git\nsudo apt install git\n</code></pre>"},{"location":"installation/server/docker-dev.html#system-requirements","title":"System Requirements","text":"<ul> <li>Docker Desktop: Latest version with Docker Compose v2</li> <li>Memory: 8 GB RAM minimum (containers will use ~2-4 GB)</li> <li>Storage: 10 GB free space for images and volumes</li> <li>Network: Internet access for image pulls</li> </ul>"},{"location":"installation/server/docker-dev.html#running-the-development-container","title":"Running the Development Container","text":"<p>Follow these steps to start the Intrudex Server development environment using Docker:</p> <ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex\n</code></pre></p> </li> <li> <p>Copy Environment Files (if needed) <pre><code>cp .env.example .env\n# Edit .env as required for your setup\n</code></pre></p> </li> <li> <p>Build the Development Image <pre><code>docker build -f Dockerfile -t intrudex-dev ./Intrudex-Server\n</code></pre></p> </li> <li> <p>Start the Container <pre><code>docker run --rm -it \\\n  -p 8000:8000 \\\n  -v $(pwd)/Intrudex-Server:/app \\\n  --env-file .env \\\n  intrudex-dev\n</code></pre></p> </li> <li> <p>Hot reload and debugging are enabled by default in the development image.</p> </li> <li> <p>Adjust volume and port mappings as needed for your environment.</p> </li> <li> <p>Access the Application</p> </li> <li>Web server: http://localhost:8000</li> <li>API docs: http://localhost:8000/docs</li> <li>Database (PostgreSQL): <code>localhost:5432</code> (if running separately)</li> <li> <p>Redis: <code>localhost:6379</code> (if running separately)</p> </li> <li> <p>Stopping the Container</p> </li> <li>Press <code>Ctrl+C</code> in the terminal running the container.</li> </ol> <p>Troubleshooting</p> <p>If you encounter permission issues with mounted volumes, ensure your user has the correct permissions or try running Docker as administrator/root.</p>"},{"location":"installation/server/docker-prod.html","title":"Docker Production Deployment","text":"<p>This guide provides comprehensive instructions for deploying the Intrudex Server in production using Docker containers with enterprise-grade orchestration, security hardening, and high availability configurations.</p>"},{"location":"installation/server/docker-prod.html#production-docker-overview","title":"Production Docker Overview","text":"<p>Production Container Features</p> <p>The production Docker deployment includes multi-stage builds, security hardening, health checks, auto-scaling, load balancing, and comprehensive monitoring with Docker Swarm or Kubernetes orchestration.</p>"},{"location":"installation/server/docker-prod.html#production-container-architecture","title":"Production Container Architecture","text":"<pre><code>graph TB\n    subgraph \"Load Balancer Layer\"\n        LB[Load Balancer]\n        SSL[SSL Termination]\n    end\n\n    subgraph \"Container Orchestration\"\n        subgraph \"Web Tier\"\n            WEB1[Web Container 1]\n            WEB2[Web Container 2]\n            WEB3[Web Container 3]\n        end\n\n        subgraph \"Database Tier\"\n            DB_PRIMARY[(PostgreSQL Primary)]\n            DB_REPLICA[(PostgreSQL Replica)]\n        end\n\n        subgraph \"Cache Tier\"\n            REDIS_MASTER[(Redis Master)]\n            REDIS_REPLICA[(Redis Replica)]\n        end\n    end\n\n    subgraph \"Infrastructure Services\"\n        MONITOR[Monitoring]\n        LOGS[Log Aggregation]\n        BACKUP[Backup Service]\n        REGISTRY[Container Registry]\n    end\n\n    LB --&gt; SSL\n    SSL --&gt; WEB1\n    SSL --&gt; WEB2\n    SSL --&gt; WEB3\n    WEB1 --&gt; DB_PRIMARY\n    WEB2 --&gt; DB_PRIMARY\n    WEB3 --&gt; DB_PRIMARY\n    DB_PRIMARY --&gt; DB_REPLICA\n    WEB1 --&gt; REDIS_MASTER\n    WEB2 --&gt; REDIS_MASTER\n    WEB3 --&gt; REDIS_MASTER\n    REDIS_MASTER --&gt; REDIS_REPLICA\n\n    MONITOR --&gt; WEB1\n    MONITOR --&gt; WEB2\n    MONITOR --&gt; WEB3\n    LOGS --&gt; WEB1\n    LOGS --&gt; WEB2\n    LOGS --&gt; WEB3\n    BACKUP --&gt; DB_PRIMARY\n    REGISTRY --&gt; WEB1\n    REGISTRY --&gt; WEB2\n    REGISTRY --&gt; WEB3\n\n    style DB_PRIMARY fill:#336791\n    style REDIS_MASTER fill:#dc382d\n    style WEB1 fill:#3498db\n    style WEB2 fill:#3498db\n    style WEB3 fill:#3498db</code></pre>"},{"location":"installation/server/docker-prod.html#production-images","title":"Production Images","text":""},{"location":"installation/server/docker-prod.html#docker-hub-images","title":"Docker Hub Images","text":"<p>The official Intrudex Docker images are available on Docker Hub:</p> <pre><code># Server Application - Development\ndocker pull armoghan/intrudex-server:1.0.0-dev\n\n# Server Application - Production\ndocker pull armoghan/intrudex-server:1.0.0-prod\n</code></pre>"},{"location":"installation/server/docker-prod.html#github-container-registry","title":"GitHub Container Registry","text":"<p>Alternative images from GitHub Container Registry:</p> <pre><code># Server Application - Development\ndocker pull ghcr.io/toolshive/intrudex:1.0.0-dev\n\n# Server Application - Production\ndocker pull ghcr.io/toolshive/intrudex:1.0.0-prod\n\n# Authentication required for private repositories\necho $GITHUB_TOKEN | docker login ghcr.io -u USERNAME --password-stdin\n</code></pre>"},{"location":"installation/server/docker-prod.html#running-the-containers","title":"Running the Containers","text":"<p>After pulling the images, run the production container with:</p> <pre><code>docker run -d --name intrudex-server-prod \\\n  -p 8080:8080 \\\n  -e DATABASE_URL=postgres://user:password@dbhost:5432/intrudex \\\n  -e REDIS_URL=redis://redishost:6379/0 \\\n  armoghan/intrudex-server:1.0.0-prod\n</code></pre> <p>For GitHub Container Registry image:</p> <pre><code>docker run -d --name intrudex-server-prod \\\n  -p 8080:8080 \\\n  -e DATABASE_URL=postgres://user:password@dbhost:5432/intrudex \\\n  -e REDIS_URL=redis://redishost:6379/0 \\\n  ghcr.io/toolshive/intrudex:1.0.0-prod\n</code></pre> <p>Adjust environment variables and ports as needed for your setup.</p>"},{"location":"installation/server/production.html","title":"Production Environment Setup","text":"<p>This guide provides comprehensive instructions for deploying the Intrudex Server in a production environment with enterprise-grade security, performance optimizations, and scalability features.</p>"},{"location":"installation/server/production.html#production-environment-overview","title":"Production Environment Overview","text":"<p>Production Configuration</p> <p>The production environment uses PostgreSQL database for reliability, WSGI servers for performance, reverse proxy for security, and comprehensive monitoring for operational excellence.</p>"},{"location":"installation/server/production.html#production-features","title":"Production Features","text":"<ul> <li>PostgreSQL Database: Enterprise-grade reliability and performance</li> <li>WSGI Server: High-performance application server (Gunicorn/Waitress)</li> <li>Reverse Proxy: Nginx/Apache for SSL termination and load balancing</li> <li>Security Hardening: Production security configurations</li> <li>Service Management: System service integration</li> <li>Monitoring &amp; Logging: Comprehensive operational monitoring</li> </ul> <pre><code>graph TB\n    subgraph \"Server Layer\"\n        Server[Intrudex Servers]\n    end\n\n    subgraph \"Load Balancer Layer\"\n        LB[Load Balancer]\n    end\n\n    subgraph \"Reverse Proxy Layer\"\n        NGINX[Nginx/Apache]\n        SSL[SSL/TLS Termination]\n    end\n\n    subgraph \"Application Layer\"\n        WSGI1[WSGI Server 1]\n        WSGI2[WSGI Server 2]\n        APP[Flask Application]\n    end\n\n    subgraph \"Database Layer\"\n        POSTGRES[(PostgreSQL)]\n        REDIS[(Redis Cache)]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        LOGS[Log Management]\n        MONITOR[Monitoring]\n        BACKUP[Backup System]\n    end\n\n    Server --&gt; LB\n    LB --&gt; NGINX\n    NGINX --&gt; SSL\n    SSL --&gt; WSGI1\n    SSL --&gt; WSGI2\n    WSGI1 --&gt; APP\n    WSGI2 --&gt; APP\n    APP --&gt; POSTGRES\n    APP --&gt; REDIS\n\n    LOGS --&gt; APP\n    MONITOR --&gt; APP\n    BACKUP --&gt; POSTGRES\n\n    style POSTGRES fill:#336791\n    style NGINX fill:#27ae60\n    style WSGI1 fill:#2d4a87\n    style WSGI2 fill:#2d4a87</code></pre>"},{"location":"installation/server/production.html#system-requirements","title":"System Requirements","text":""},{"location":"installation/server/production.html#minimum-production-specifications","title":"Minimum Production Specifications","text":"<ul> <li>Operating System: Ubuntu 20.04 LTS, CentOS 8+, RHEL 8+, or Windows Server 2019+</li> <li>CPU: 4 cores minimum (8+ cores recommended)</li> <li>Memory: 8 GB RAM minimum (16+ GB recommended)</li> <li>Storage: 100 GB SSD storage (500+ GB for high-volume environments)</li> <li>Network: Gigabit network interface</li> <li>SSL Certificates: Valid SSL certificates for production domains</li> </ul>"},{"location":"installation/server/production.html#high-availability-specifications","title":"High Availability Specifications","text":"<ul> <li>CPU: 8+ cores per server</li> <li>Memory: 32+ GB RAM per server</li> <li>Storage: 1+ TB SSD with RAID configuration</li> <li>Network: Redundant network interfaces</li> <li>Load Balancer: Hardware or software load balancer</li> <li>Database: PostgreSQL cluster with replication</li> </ul>"},{"location":"installation/server/production.html#prerequisites-installation","title":"Prerequisites Installation","text":""},{"location":"installation/server/production.html#system-updates-and-dependencies","title":"System Updates and Dependencies","text":"Ubuntu/DebianCentOS/RHELWindows Server <pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install essential packages\nsudo apt install -y python3 python3-pip python3-venv python3-dev \\\n                    postgresql postgresql-contrib postgresql-client \\\n                    nginx redis-server git curl wget \\\n                    build-essential libpq-dev libssl-dev libffi-dev\n\n# Install Node.js (for frontend builds)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n</code></pre> <pre><code># Update system packages\nsudo dnf update -y\n\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install essential packages\nsudo dnf install -y python3 python3-pip python3-devel \\\n                    postgresql postgresql-server postgresql-contrib \\\n                    nginx redis git curl wget \\\n                    gcc gcc-c++ make libpq-devel openssl-devel libffi-devel\n\n# Install Node.js\ncurl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo dnf install -y nodejs\n</code></pre> <pre><code># Install Chocolatey package manager\nSet-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n\n# Install required packages\nchoco install -y python nodejs postgresql redis-64 git\n\n# Install IIS and URL Rewrite (for reverse proxy)\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole, IIS-WebServer\nchoco install -y urlrewrite\n</code></pre>"},{"location":"installation/server/production.html#database-setup-postgresql","title":"Database Setup (PostgreSQL)","text":""},{"location":"installation/server/production.html#postgresql-installation-and-configuration","title":"PostgreSQL Installation and Configuration","text":"Ubuntu/DebianCentOS/RHELWindows Server <pre><code># Start and enable PostgreSQL\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create production database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE intrudex_production;\nCREATE USER intrudex_user WITH PASSWORD 'secure_production_password';\nGRANT ALL PRIVILEGES ON DATABASE intrudex_production TO intrudex_user;\nALTER USER intrudex_user CREATEDB;\n\\q\nEOF\n\n# Configure PostgreSQL for production\nsudo nano /etc/postgresql/*/main/postgresql.conf\n# Edit the following settings:\n# listen_addresses = '*'\n# max_connections = 200\n# shared_buffers = 256MB\n# effective_cache_size = 1GB\n# work_mem = 4MB\n# maintenance_work_mem = 64MB\n\n# Configure authentication\nsudo nano /etc/postgresql/*/main/pg_hba.conf\n# Add: host intrudex_production intrudex_user 127.0.0.1/32 md5\n\n# Restart PostgreSQL\nsudo systemctl restart postgresql\n</code></pre> <pre><code># Initialize PostgreSQL database\nsudo postgresql-setup --initdb\n\n# Start and enable PostgreSQL\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create production database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE intrudex_production;\nCREATE USER intrudex_user WITH PASSWORD 'secure_production_password';\nGRANT ALL PRIVILEGES ON DATABASE intrudex_production TO intrudex_user;\nALTER USER intrudex_user CREATEDB;\n\\q\nEOF\n\n# Configure PostgreSQL (similar to Ubuntu instructions above)\nsudo systemctl restart postgresql\n</code></pre> <pre><code># PostgreSQL is installed via Chocolatey\n# Configure via PostgreSQL GUI or command line\n\n# Create database using psql\npsql -U postgres -c \"CREATE DATABASE intrudex_production;\"\npsql -U postgres -c \"CREATE USER intrudex_user WITH PASSWORD 'secure_production_password';\"\npsql -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE intrudex_production TO intrudex_user;\"\n</code></pre>"},{"location":"installation/server/production.html#database-performance-tuning","title":"Database Performance Tuning","text":"<pre><code>-- Connect to PostgreSQL and apply performance settings\n-- For systems with 8GB+ RAM\n\nALTER SYSTEM SET shared_buffers = '2GB';\nALTER SYSTEM SET effective_cache_size = '6GB';\nALTER SYSTEM SET maintenance_work_mem = '512MB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = '16MB';\nALTER SYSTEM SET default_statistics_target = 100;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n</code></pre>"},{"location":"installation/server/production.html#application-deployment","title":"Application Deployment","text":""},{"location":"installation/server/production.html#step-1-application-setup","title":"Step 1: Application Setup","text":"<pre><code># Create production user\nsudo useradd -m -s /bin/bash intrudex\nsudo usermod -aG sudo intrudex\n\n# Switch to production user\nsudo su - intrudex\n\n# Clone repository\ngit clone https://github.com/ToolsHive/Intrudex.git\ncd Intrudex/Intrudex-Server\n\n# Create production virtual environment\npython3 -m venv venv-production\nsource venv-production/bin/activate\n\n# Install production dependencies\npip install --upgrade pip\npip install -r requirements.txt\n\n# Install production WSGI server\npip install gunicorn  # Linux/macOS\n# pip install waitress  # Windows alternative\n</code></pre>"},{"location":"installation/server/production.html#step-2-production-environment-configuration","title":"Step 2: Production Environment Configuration","text":"<p>Create production environment configuration:</p> <pre><code># Create production .env file\ncat &gt; .env &lt;&lt; 'EOF'\n# Production Server Configuration\nFLASK_RUN_PORT=80\nFLASK_RUN_HOST=0.0.0.0\nFLASK_ENV=production\nFLASK_DEBUG=0\n\n# Security Configuration\nSECRET_KEY=your-cryptographically-secure-production-key-min-32-chars\nWTF_CSRF_ENABLED=True\nSESSION_COOKIE_SECURE=True\nSESSION_COOKIE_HTTPONLY=True\nSESSION_COOKIE_SAMESITE=Lax\n\n# Production Database Configuration\nDATABASE_URL=postgresql://intrudex_user:secure_production_password@localhost/intrudex_production\nSQLALCHEMY_TRACK_MODIFICATIONS=False\nSQLALCHEMY_ENGINE_OPTIONS={\"pool_pre_ping\": True, \"pool_recycle\": 300}\n\n# Redis Configuration (optional)\nREDIS_URL=redis://localhost:6379/0\n\n# Production Logging\nLOG_LEVEL=INFO\nLOG_FILE=/var/log/intrudex/intrudex.log\n\n# Security Headers\nSECURITY_HEADERS=True\nSSL_DISABLE=False\nEOF\n\n# Secure the environment file\nchmod 600 .env\n</code></pre>"},{"location":"installation/server/production.html#step-3-frontend-assets-build","title":"Step 3: Frontend Assets Build","text":"<pre><code># Install Node.js dependencies\nnpm install\n\n# Build production assets\nnpm run build\n</code></pre>"},{"location":"installation/server/production.html#step-4-database-migration","title":"Step 4: Database Migration","text":"<pre><code># Ensure virtual environment is activated\nsource venv-production/bin/activate\n\n# Initialize database schema\nflask db init\nflask db migrate -m \"Initial production migration\"\nflask db upgrade\n\n# Create production admin user\nflask create-admin\n# Enter secure credentials when prompted\n</code></pre>"},{"location":"installation/server/production.html#wsgi-server-configuration","title":"WSGI Server Configuration","text":""},{"location":"installation/server/production.html#gunicorn-configuration-linuxmacos","title":"Gunicorn Configuration (Linux/macOS)","text":"<p>Create Gunicorn configuration file:</p> <pre><code># Create Gunicorn configuration\ncat &gt; gunicorn.conf.py &lt;&lt; 'EOF'\n# Gunicorn production configuration\n\n# Server socket\nbind = \"0.0.0.0:8000\"\nbacklog = 2048\n\n# Worker processes\nworkers = 4  # 2 * CPU cores\nworker_class = \"sync\"\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\n\n# Restart workers after this many requests\nmax_requests = 1000\nmax_requests_jitter = 50\n\n# Logging\nloglevel = \"info\"\naccesslog = \"/var/log/intrudex/gunicorn-access.log\"\nerrorlog = \"/var/log/intrudex/gunicorn-error.log\"\ncapture_output = True\n\n# Process naming\nproc_name = \"intrudex-server\"\n\n# Server mechanics\ndaemon = False\npidfile = \"/var/run/intrudex/gunicorn.pid\"\nuser = \"intrudex\"\ngroup = \"intrudex\"\ntmp_upload_dir = None\n\n# SSL (if terminating SSL at application level)\n# keyfile = \"/path/to/private.key\"\n# certfile = \"/path/to/certificate.crt\"\nEOF\n</code></pre> <p>Test Gunicorn configuration:</p> <pre><code># Test Gunicorn startup\ngunicorn --config gunicorn.conf.py wsgi:app\n\n# Test with configuration check\ngunicorn --check-config --config gunicorn.conf.py wsgi:app\n</code></pre>"},{"location":"installation/server/production.html#waitress-configuration-windows","title":"Waitress Configuration (Windows)","text":"<p>For Windows production deployments:</p> <pre><code># Create waitress_config.py\n\"\"\"\nWaitress production configuration for Windows\n\"\"\"\n\nimport os\nfrom waitress import serve\nfrom wsgi import app\n\nif __name__ == '__main__':\n    # Production configuration\n    serve(\n        app,\n        host='0.0.0.0',\n        port=8000,\n        threads=6,\n        connection_limit=1000,\n        cleanup_interval=30,\n        channel_timeout=120,\n        log_untrusted_proxy_headers=True,\n        clear_untrusted_proxy_headers=True,\n        trusted_proxy_headers=['x-forwarded-for', 'x-forwarded-proto'],\n        trusted_proxy_count=1\n    )\n</code></pre>"},{"location":"installation/server/production.html#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":""},{"location":"installation/server/production.html#nginx-configuration","title":"Nginx Configuration","text":"<p>Create Nginx server configuration:</p> <pre><code># Create Nginx configuration\nsudo tee /etc/nginx/sites-available/intrudex &lt;&lt; 'EOF'\n# Intrudex Server Production Configuration\n\nupstream intrudex_backend {\n    server 127.0.0.1:8000;\n    # Add more servers for load balancing\n    # server 127.0.0.1:8001;\n    # server 127.0.0.1:8002;\n}\n\n# Rate limiting\nlimit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\nlimit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;\n\n# SSL Configuration\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;\nssl_prefer_server_ciphers on;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n    return 301 https://$server_name$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name your-domain.com www.your-domain.com;\n\n    # SSL Configuration\n    ssl_certificate /path/to/your/certificate.crt;\n    ssl_certificate_key /path/to/your/private.key;\n\n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';\" always;\n\n    # Gzip Compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/javascript\n        application/xml+rss\n        application/json;\n\n    # API Routes with rate limiting\n    location /api/ {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://intrudex_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 30s;\n        proxy_send_timeout 30s;\n        proxy_read_timeout 30s;\n    }\n\n    # Login endpoint with stricter rate limiting\n    location /api/auth/login {\n        limit_req zone=login burst=5 nodelay;\n        proxy_pass http://intrudex_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Static files with caching\n    location /static/ {\n        alias /home/intrudex/Intrudex/Intrudex-Server/static/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # Main application\n    location / {\n        proxy_pass http://intrudex_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_connect_timeout 30s;\n        proxy_send_timeout 30s;\n        proxy_read_timeout 30s;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://intrudex_backend;\n        proxy_set_header Host $host;\n    }\n}\nEOF\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/intrudex /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"installation/server/production.html#apache-configuration-alternative","title":"Apache Configuration (Alternative)","text":"<pre><code># /etc/apache2/sites-available/intrudex.conf\n\n&lt;VirtualHost *:80&gt;\n    ServerName your-domain.com\n    Redirect permanent / https://your-domain.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName your-domain.com\n\n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /path/to/your/certificate.crt\n    SSLCertificateKeyFile /path/to/your/private.key\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\n\n    # Security Headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Frame-Options DENY\n    Header always set X-Content-Type-Options nosniff\n\n    # Reverse Proxy Configuration\n    ProxyPreserveHost On\n    ProxyPass / http://127.0.0.1:8000/\n    ProxyPassReverse / http://127.0.0.1:8000/\n\n    # Static files\n    Alias /static /home/intrudex/Intrudex/Intrudex-Server/static\n    &lt;Directory \"/home/intrudex/Intrudex/Intrudex-Server/static\"&gt;\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"installation/server/production.html#system-service-configuration","title":"System Service Configuration","text":""},{"location":"installation/server/production.html#systemd-service-linux","title":"Systemd Service (Linux)","text":"<p>Create systemd service file:</p> <pre><code># Create systemd service\nsudo tee /etc/systemd/system/intrudex.service &lt;&lt; 'EOF'\n[Unit]\nDescription=Intrudex Security Monitoring Server\nAfter=network.target postgresql.service redis.service\nWants=postgresql.service redis.service\n\n[Service]\nType=exec\nUser=intrudex\nGroup=intrudex\nWorkingDirectory=/home/intrudex/Intrudex/Intrudex-Server\nEnvironment=PATH=/home/intrudex/Intrudex/Intrudex-Server/venv-production/bin\nExecStart=/home/intrudex/Intrudex/Intrudex-Server/venv-production/bin/gunicorn --config gunicorn.conf.py wsgi:app\nExecReload=/bin/kill -s HUP $MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=intrudex\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/var/log/intrudex /var/run/intrudex\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create necessary directories\nsudo mkdir -p /var/log/intrudex /var/run/intrudex\nsudo chown intrudex:intrudex /var/log/intrudex /var/run/intrudex\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable intrudex\nsudo systemctl start intrudex\nsudo systemctl status intrudex\n</code></pre>"},{"location":"installation/server/production.html#windows-service","title":"Windows Service","text":"<p>For Windows Server deployments using NSSM:</p> <pre><code># Download and install NSSM\nInvoke-WebRequest -Uri \"https://nssm.cc/release/nssm-2.24.zip\" -OutFile \"nssm.zip\"\nExpand-Archive -Path \"nssm.zip\" -DestinationPath \"C:\\Program Files\\\"\n\n# Install Intrudex as Windows service\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe install IntrudexServer\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer Application \"C:\\Python\\python.exe\"\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer AppParameters \"C:\\Intrudex\\Intrudex-Server\\waitress_config.py\"\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer AppDirectory \"C:\\Intrudex\\Intrudex-Server\"\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer DisplayName \"Intrudex Security Monitoring Server\"\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer Description \"Enterprise security monitoring and threat detection server\"\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe set IntrudexServer Start SERVICE_AUTO_START\n\n# Start the service\nC:\\Program Files\\nssm-2.24\\win64\\nssm.exe start IntrudexServer\n</code></pre>"},{"location":"installation/server/production.html#security-hardening","title":"Security Hardening","text":""},{"location":"installation/server/production.html#firewall-configuration","title":"Firewall Configuration","text":"Ubuntu/Debian (UFW)CentOS/RHEL (firewalld) <pre><code># Enable firewall\nsudo ufw enable\n\n# Allow SSH (adjust port if needed)\nsudo ufw allow 22/tcp\n\n# Allow HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow PostgreSQL (local only)\nsudo ufw allow from 127.0.0.1 to any port 5432\n\n# Allow Redis (local only)\nsudo ufw allow from 127.0.0.1 to any port 6379\n\n# Check status\nsudo ufw status\n</code></pre> <pre><code># Enable firewall\nsudo systemctl enable firewalld\nsudo systemctl start firewalld\n\n# Allow HTTP and HTTPS\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\n\n# Allow SSH\nsudo firewall-cmd --permanent --add-service=ssh\n\n# Reload firewall\nsudo firewall-cmd --reload\n</code></pre>"},{"location":"installation/server/production.html#ssltls-certificate-setup","title":"SSL/TLS Certificate Setup","text":""},{"location":"installation/server/production.html#using-lets-encrypt-recommended","title":"Using Let's Encrypt (Recommended)","text":"<pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx  # Ubuntu/Debian\n# sudo dnf install certbot python3-certbot-nginx  # CentOS/RHEL\n\n# Obtain SSL certificate\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n\n# Set up automatic renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"installation/server/production.html#using-custom-certificate","title":"Using Custom Certificate","text":"<pre><code># Copy your certificate files\nsudo cp your-certificate.crt /etc/ssl/certs/intrudex.crt\nsudo cp your-private.key /etc/ssl/private/intrudex.key\n\n# Set proper permissions\nsudo chmod 644 /etc/ssl/certs/intrudex.crt\nsudo chmod 600 /etc/ssl/private/intrudex.key\nsudo chown root:root /etc/ssl/certs/intrudex.crt /etc/ssl/private/intrudex.key\n</code></pre>"},{"location":"installation/server/production.html#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"installation/server/production.html#log-management","title":"Log Management","text":"<p>Configure comprehensive logging:</p> <pre><code># Create log rotation configuration\nsudo tee /etc/logrotate.d/intrudex &lt;&lt; 'EOF'\n/var/log/intrudex/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 intrudex intrudex\n    postrotate\n        systemctl reload intrudex\n    endscript\n}\nEOF\n</code></pre>"},{"location":"installation/server/production.html#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"installation/server/production.html#database-backup","title":"Database Backup","text":"<pre><code>#!/bin/bash\n# /usr/local/bin/intrudex-backup.sh\n\nBACKUP_DIR=\"/var/backups/intrudex\"\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_NAME=\"intrudex_production\"\nDB_USER=\"intrudex_user\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Database backup\npg_dump -U \"$DB_USER\" -h localhost \"$DB_NAME\" | gzip &gt; \"$BACKUP_DIR/db_backup_$DATE.sql.gz\"\n\n# Application backup\ntar -czf \"$BACKUP_DIR/app_backup_$DATE.tar.gz\" -C /home/intrudex Intrudex/\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.gz\" -mtime +30 -delete\n\necho \"Backup completed: $DATE\"\n</code></pre>"},{"location":"installation/server/production.html#automated-backup-setup","title":"Automated Backup Setup","text":"<pre><code># Make backup script executable\nchmod +x /usr/local/bin/intrudex-backup.sh\n\n# Add to cron for daily backups\necho \"0 2 * * * /usr/local/bin/intrudex-backup.sh &gt;&gt; /var/log/intrudex/backup.log 2&gt;&amp;1\" | sudo crontab -\n</code></pre>"},{"location":"installation/server/production.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/server/production.html#common-production-issues","title":"Common Production Issues","text":"<p>High CPU Usage</p> <p>Symptom: Server experiencing high CPU utilization</p> <p>Resolution: 1. Check Gunicorn worker processes: <code>ps aux | grep gunicorn</code> 2. Optimize worker count in <code>gunicorn.conf.py</code> 3. Review database queries for optimization 4. Check for memory leaks</p> <p>Database Connection Errors</p> <p>Symptom: Application cannot connect to PostgreSQL</p> <p>Resolution: 1. Verify PostgreSQL service: <code>sudo systemctl status postgresql</code> 2. Check connection limits: <code>SELECT * FROM pg_stat_activity;</code> 3. Review <code>pg_hba.conf</code> authentication settings 4. Verify network connectivity</p> <p>SSL Certificate Issues</p> <p>Symptom: SSL warnings or connection errors</p> <p>Resolution: 1. Verify certificate validity: <code>openssl x509 -in cert.crt -text -noout</code> 2. Check certificate chain completeness 3. Verify domain name matches certificate 4. Test with SSL Labs: https://www.ssllabs.com/ssltest/</p>"}]}